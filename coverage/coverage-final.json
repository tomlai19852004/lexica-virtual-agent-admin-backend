{"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/Constants.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/Constants.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":23}},"3":{"start":{"line":5,"column":20},"end":{"line":24,"column":1}},"4":{"start":{"line":25,"column":0},"end":{"line":25,"column":34}},"5":{"start":{"line":26,"column":20},"end":{"line":32,"column":1}},"6":{"start":{"line":33,"column":0},"end":{"line":33,"column":34}},"7":{"start":{"line":34,"column":19},"end":{"line":34,"column":27}},"8":{"start":{"line":35,"column":0},"end":{"line":35,"column":32}},"9":{"start":{"line":36,"column":0},"end":{"line":40,"column":3}},"10":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"11":{"start":{"line":38,"column":8},"end":{"line":38,"column":69}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":36,"column":33},"end":{"line":36,"column":34}},"loc":{"start":{"line":36,"column":47},"end":{"line":40,"column":1}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},{"start":{"line":37,"column":4},"end":{"line":39,"column":5}}],"line":37}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":162,"11":0},"f":{"0":162},"b":{"0":[0,162]},"inputSourceMap":{"version":3,"file":"Constants.js","sourceRoot":"","sources":["Constants.ts"],"names":[],"mappings":";;AAAA,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAE3B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AACxB,MAAM,WAAW,GAAG;IAClB,iBAAiB,EAAE,GAAG,CAAC,iBAA2B;IAClD,0BAA0B,EAAE,GAAG,CAAC,0BAAoC;IACpE,qBAAqB,EAAE,GAAG,CAAC,qBAA+B;IAC1D,2BAA2B,EAAE,GAAG,CAAC,2BAAqC;IACtE,sBAAsB,EAAE,GAAG,CAAC,sBAAgC;IAC5D,sBAAsB,EAAE,GAAG,CAAC,sBAAgC;IAC5D,UAAU,EAAE,GAAG,CAAC,UAAoB;IACpC,qBAAqB,EAAE,GAAG,CAAC,qBAA+B;IAC1D,iBAAiB,EAAE,GAAG,CAAC,iBAA2B;IAClD,OAAO,EAAE,GAAG,CAAC,OAAiB;IAC9B,SAAS,EAAE,GAAG,CAAC,SAAmB;IAClC,IAAI,EAAE,GAAG,CAAC,IAAc;IACxB,aAAa,EAAE,QAAQ,CAAC,GAAG,CAAC,aAAuB,EAAE,EAAE,CAAW;IAClE,QAAQ,EAAE,GAAG,CAAC,QAAkB;IAChC,QAAQ,EAAE,GAAG,CAAC,QAAkB;IAChC,QAAQ,EAAE,GAAG,CAAC,QAAkB;IAChC,WAAW,EAAE,GAAG,CAAC,WAAqB;IACtC,qBAAqB,EAAE,GAAG,CAAC,qBAA+B;CAC3D,CAAC;AAmBA,kCAAW;AAjBb,MAAM,WAAW,GAAG;IAClB,mBAAmB,EAAE,qBAAqB;IAC1C,yCAAyC,EAAE,2CAA2C;IACtF,uBAAuB,EAAE,yBAAyB;IAClD,kBAAkB,EAAE,oBAAoB;IACxC,YAAY,EAAE,cAAc;CAC7B,CAAC;AAYA,kCAAW;AAVb,MAAM,UAAU,GAAG,QAAQ,CAAC;AAW1B,gCAAU;AATZ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;IAC5C,IAAI,GAAG,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,iCAAiC,QAAQ,EAAE,CAAC,CAAC;KAC9D;AACH,CAAC,CAAC,CAAC","sourcesContent":["require('dotenv').config();\n\nconst env = process.env;\nconst ENV_CONFIGS = {\n  AWS_ACCESS_KEY_ID: env.AWS_ACCESS_KEY_ID as string,\n  AWS_CHATBOT_S3_API_VERSION: env.AWS_CHATBOT_S3_API_VERSION as string,\n  AWS_CHATBOT_S3_BUCKET: env.AWS_CHATBOT_S3_BUCKET as string,\n  AWS_CHATBOT_SES_API_VERSION: env.AWS_CHATBOT_SES_API_VERSION as string,\n  AWS_CHATBOT_SES_REGION: env.AWS_CHATBOT_SES_REGION as string,\n  AWS_CHATBOT_SES_SENDER: env.AWS_CHATBOT_SES_SENDER as string,\n  AWS_REGION: env.AWS_REGION as string,\n  AWS_SECRET_ACCESS_KEY: env.AWS_SECRET_ACCESS_KEY as string,\n  JWT_EXPIRE_SECOND: env.JWT_EXPIRE_SECOND as string,\n  JWT_KEY: env.JWT_KEY as string,\n  MONGO_URL: env.MONGO_URL as string,\n  PORT: env.PORT as string,\n  SCRYPT_KEYLEN: parseInt(env.SCRYPT_KEYLEN as string, 10) as number,\n  SCRYPT_N: env.SCRYPT_N as string,\n  SCRYPT_P: env.SCRYPT_P as string,\n  SCRYPT_R: env.SCRYPT_R as string,\n  SCRYPT_SALT: env.SCRYPT_SALT as string,\n  SUGGESTION_SERVER_URL: env.SUGGESTION_SERVER_URL as string,\n};\n\nconst CONFIG_KEYS = {\n  LIBRARIAN_INDICATOR: 'LIBRARIAN_INDICATOR',\n  PREPEND_MESSAGES_PRIOR_TO_LIBRARIAN_REPLY: 'PREPEND_MESSAGES_PRIOR_TO_LIBRARIAN_REPLY',\n  RECREATE_ISSUE_KEY_WORD: 'RECREATE_ISSUE_KEY_WORD',\n  SUSPEND_AUTO_REPLY: 'SUSPEND_AUTO_REPLY',\n  TOKENS_TYPES: 'TOKENS_TYPES',\n};\n\nconst GLOBAL_UNI = 'GLOBAL';\n\nObject.keys(ENV_CONFIGS).forEach((variable) => {\n  if (env[variable] === undefined) {\n    throw new Error(`Missing environment variable: ${variable}`);\n  }\n});\n\nexport {\n  ENV_CONFIGS,\n  CONFIG_KEYS,\n  GLOBAL_UNI,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"a4dfc76790079a3d40b777c184117d40e3806d02"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/Server.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/Server.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":12},"end":{"line":3,"column":26}},"2":{"start":{"line":4,"column":19},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":29}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":36}},"5":{"start":{"line":7,"column":16},"end":{"line":7,"column":34}},"6":{"start":{"line":8,"column":17},"end":{"line":8,"column":36}},"7":{"start":{"line":9,"column":12},"end":{"line":9,"column":30}},"8":{"start":{"line":10,"column":17},"end":{"line":10,"column":34}},"9":{"start":{"line":11,"column":20},"end":{"line":11,"column":42}},"10":{"start":{"line":12,"column":12},"end":{"line":12,"column":28}},"11":{"start":{"line":13,"column":22},"end":{"line":13,"column":46}},"12":{"start":{"line":14,"column":14},"end":{"line":14,"column":31}},"13":{"start":{"line":15,"column":37},"end":{"line":15,"column":60}},"14":{"start":{"line":19,"column":14},"end":{"line":54,"column":1}},"15":{"start":{"line":20,"column":17},"end":{"line":22,"column":6}},"16":{"start":{"line":23,"column":4},"end":{"line":23,"column":20}},"17":{"start":{"line":24,"column":4},"end":{"line":24,"column":24}},"18":{"start":{"line":25,"column":4},"end":{"line":25,"column":26}},"19":{"start":{"line":26,"column":4},"end":{"line":26,"column":20}},"20":{"start":{"line":27,"column":4},"end":{"line":27,"column":55}},"21":{"start":{"line":28,"column":4},"end":{"line":35,"column":8}},"22":{"start":{"line":36,"column":4},"end":{"line":39,"column":8}},"23":{"start":{"line":40,"column":4},"end":{"line":42,"column":79}},"24":{"start":{"line":42,"column":27},"end":{"line":42,"column":77}},"25":{"start":{"line":43,"column":4},"end":{"line":43,"column":27}},"26":{"start":{"line":44,"column":4},"end":{"line":48,"column":7}},"27":{"start":{"line":49,"column":4},"end":{"line":49,"column":46}},"28":{"start":{"line":50,"column":4},"end":{"line":50,"column":38}},"29":{"start":{"line":51,"column":4},"end":{"line":51,"column":60}},"30":{"start":{"line":52,"column":4},"end":{"line":52,"column":30}},"31":{"start":{"line":53,"column":4},"end":{"line":53,"column":57}},"32":{"start":{"line":55,"column":0},"end":{"line":55,"column":22}},"33":{"start":{"line":56,"column":13},"end":{"line":71,"column":1}},"34":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"35":{"start":{"line":58,"column":8},"end":{"line":58,"column":36}},"36":{"start":{"line":59,"column":8},"end":{"line":59,"column":31}},"37":{"start":{"line":61,"column":4},"end":{"line":70,"column":7}},"38":{"start":{"line":62,"column":8},"end":{"line":69,"column":9}},"39":{"start":{"line":63,"column":12},"end":{"line":63,"column":34}},"40":{"start":{"line":64,"column":12},"end":{"line":64,"column":31}},"41":{"start":{"line":65,"column":12},"end":{"line":65,"column":28}},"42":{"start":{"line":68,"column":12},"end":{"line":68,"column":22}},"43":{"start":{"line":72,"column":0},"end":{"line":72,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":14},"end":{"line":19,"column":15}},"loc":{"start":{"line":19,"column":26},"end":{"line":54,"column":1}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":42,"column":17},"end":{"line":42,"column":18}},"loc":{"start":{"line":42,"column":27},"end":{"line":42,"column":77}},"line":42},"2":{"name":"(anonymous_2)","decl":{"start":{"line":56,"column":13},"end":{"line":56,"column":14}},"loc":{"start":{"line":56,"column":25},"end":{"line":71,"column":1}},"line":56},"3":{"name":"(anonymous_3)","decl":{"start":{"line":61,"column":22},"end":{"line":61,"column":23}},"loc":{"start":{"line":61,"column":35},"end":{"line":70,"column":5}},"line":61}},"branchMap":{"0":{"loc":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},{"start":{"line":57,"column":4},"end":{"line":60,"column":5}}],"line":57},"1":{"loc":{"start":{"line":62,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":69,"column":9}},{"start":{"line":62,"column":8},"end":{"line":69,"column":9}}],"line":62}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":9,"14":9,"15":9,"16":9,"17":9,"18":9,"19":9,"20":9,"21":9,"22":9,"23":9,"24":45,"25":9,"26":9,"27":9,"28":9,"29":9,"30":9,"31":9,"32":9,"33":9,"34":9,"35":9,"36":9,"37":9,"38":9,"39":9,"40":9,"41":9,"42":0,"43":9},"f":{"0":9,"1":45,"2":9,"3":9},"b":{"0":[9,0],"1":[9,0]},"inputSourceMap":{"version":3,"file":"Server.js","sourceRoot":"","sources":["Server.ts"],"names":[],"mappings":";;AACA,2BAA2B;AAC3B,6CAA6C;AAE7C,8BAA8B;AAC9B,qCAAqC;AACrC,mCAAmC;AACnC,qCAAqC;AACrC,+BAA+B;AAC/B,mCAA+B;AAC/B,2CAA0C;AAC1C,6BAA6B;AAC7B,+CAIuB;AAEvB,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEhC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,uBAAW,CAAC;AACjD,IAAI,GAAoB,CAAC;AACzB,IAAI,MAA0B,CAAC;AAC/B,IAAI,UAA2C,CAAC;AAEhD,MAAM,KAAK,GAAG,KAAK,IAAI,EAAE;IACvB,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC;QACtB,MAAM,EAAE,MAAM;KACf,CAAC,CAAC;IAEH,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;IAChB,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACpB,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,GAAG,CAAC,uCAAyB,EAAE,CAAC,CAAC;IAErC,GAAG,CAAC,GAAG,CAAC,oCAAsB,EAAE,CAAC,MAAM,CAAC;QACtC,IAAI,EAAE;YACJ,uBAAuB;YACvB,uBAAuB;YACvB,0BAA0B;YAC1B,qDAAqD;SACtD;KACF,CAAC,CAAC,CAAC;IAGJ,GAAG,CAAC,GAAG,CAAC,gCAAkB,CAAC;QACzB,WAAW,EAAE,EAAE;QACf,OAAO,EAAE,IAAI;KACd,CAAC,CAAC,CAAC;IAEJ,MAAM;SACH,MAAM,CAAC,GAAG,CAAC;SACX,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IAEzE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAEvB,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;QAChB,WAAW,EAAE,uBAAW,CAAC,iBAAiB;QAC1C,MAAM,EAAE,uBAAW,CAAC,UAAU;QAC9B,eAAe,EAAE,uBAAW,CAAC,qBAAqB;KACnD,CAAC,CAAC;IACH,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAEzC,QAAgB,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAC3C,UAAU,GAAG,MAAM,QAAQ,CAAC,gBAAgB,CAAC,SAAmB,CAAC,CAAC;IAElE,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,OAAO,CAAC,IAAI,CAAC,gCAAgC,IAAI,EAAE,CAAC,CAAC;AACvD,CAAC,CAAC;AAmBO,sBAAK;AAjBd,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IACtB,IAAI,CAAC,cAAK,CAAC,UAAU,CAAC,EAAE;QACtB,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC5B,UAAU,GAAG,SAAS,CAAC;KACxB;IAED,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC5B,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,EAAE;YAClB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,GAAG,SAAS,CAAC;YACnB,GAAG,GAAG,SAAS,CAAC;SACjB;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEc,oBAAI","sourcesContent":["import { Server } from 'http';\nimport * as Koa from 'koa';\nimport * as BodyParser from 'koa-bodyparser';\nimport * as koaJwt from 'koa-jwt';\nimport * as cors from 'kcors';\nimport * as Router from 'koa-router';\nimport * as winston from 'winston';\nimport * as mongoose from 'mongoose';\nimport * as AWS from 'aws-sdk';\nimport { isNil } from 'lodash';\nimport { ENV_CONFIGS } from './Constants';\nimport * as api from './api';\nimport {\n  responseWrapperMiddleware,\n  pageableMiddleware,\n  createKaoJwtMiddleware,\n} from './middlewares';\n\nconst koaQs = require('koa-qs');\n\nconst { PORT, MONGO_URL, JWT_KEY } = ENV_CONFIGS;\nlet koa: Koa | undefined;\nlet server: Server | undefined;\nlet connection: mongoose.Connection | undefined;\n\nconst start = async () => {\n  const root = new Router({\n    prefix: '/api',\n  });\n\n  koa = new Koa();\n  koaQs(koa, 'first');\n  koa.use(BodyParser());\n  koa.use(cors());\n  koa.use(responseWrapperMiddleware());\n\n  koa.use(createKaoJwtMiddleware().unless({\n    path: [\n      /^\\/api\\/users\\/token$/,\n      /^\\/api\\/users\\/types$/,\n      /^\\/api\\/users\\/validate$/,\n      /^\\/api\\/conversations\\/[\\w]+\\/messages\\/[\\w]+\\/file/,\n    ],\n  }));\n\n\n  koa.use(pageableMiddleware({\n    defaultSize: 50,\n    maxSize: 5000,\n  }));\n\n  Object\n    .values(api)\n    .forEach(router => root.use(router.routes(), router.allowedMethods()));\n\n  koa.use(root.routes());\n\n  AWS.config.update({\n    accessKeyId: ENV_CONFIGS.AWS_ACCESS_KEY_ID,\n    region: ENV_CONFIGS.AWS_REGION,\n    secretAccessKey: ENV_CONFIGS.AWS_SECRET_ACCESS_KEY,\n  });\n  AWS.config.setPromisesDependency(Promise);\n\n  (mongoose as any).Promise = global.Promise;\n  connection = await mongoose.createConnection(MONGO_URL as string);\n\n  server = koa.listen(PORT);\n  winston.info(`Server is listening on PORT: ${PORT}`);\n};\n\nconst stop = async () => {\n  if (!isNil(connection)) {\n    await mongoose.disconnect();\n    connection = undefined;\n  }\n\n  await new Promise((resolve) => {\n    if (!isNil(server)) {\n      server.close(resolve);\n      server = undefined;\n      koa = undefined;\n    } else {\n      resolve();\n    }\n  });\n};\n\nexport { start, stop };\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"eec5aba6f9c2f15dfe3026297065211c622eec41"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/index.ts","statementMap":{"0":{"start":{"line":1,"column":13},"end":{"line":1,"column":42}},"1":{"start":{"line":1,"column":42},"end":{"line":1,"column":55}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"3":{"start":{"line":3,"column":17},"end":{"line":3,"column":36}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":17}}},"fnMap":{},"branchMap":{},"s":{"0":0,"1":0,"2":0,"3":0,"4":0},"f":{},"b":{}}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":14},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":18},"end":{"line":5,"column":40}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":39}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":38}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":38}},"7":{"start":{"line":9,"column":23},"end":{"line":9,"column":50}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"9":{"start":{"line":11,"column":22},"end":{"line":11,"column":48}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,iCAA2C;AAAlC,wBAAA,OAAO,CAAS;AACzB,yCAAkD;AAAzC,+BAAA,OAAO,CAAY;AAC5B,uCAAiD;AAAxC,8BAAA,OAAO,CAAY;AAC5B,mDAA4D;AAAnD,yCAAA,OAAO,CAAiB;AACjC,iDAA2D;AAAlD,wCAAA,OAAO,CAAiB","sourcesContent":["export { default as users } from './users';\nexport { default as resource } from './resources';\nexport { default as controls } from './controls';\nexport { default as dataAnalytics } from './data-analytics';\nexport { default as conversations } from './conversations';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"2609463debf50c8084dc4bd810da7e764325fc46"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/controls/AutoReply.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/controls/AutoReply.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":35},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":46}},"5":{"start":{"line":7,"column":15},"end":{"line":7,"column":27}},"6":{"start":{"line":8,"column":0},"end":{"line":26,"column":3}},"7":{"start":{"line":9,"column":20},"end":{"line":9,"column":34}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":21}},"9":{"start":{"line":11,"column":22},"end":{"line":12,"column":79}},"10":{"start":{"line":13,"column":4},"end":{"line":25,"column":5}},"11":{"start":{"line":14,"column":31},"end":{"line":14,"column":40}},"12":{"start":{"line":15,"column":8},"end":{"line":15,"column":36}},"13":{"start":{"line":18,"column":23},"end":{"line":22,"column":10}},"14":{"start":{"line":23,"column":31},"end":{"line":23,"column":37}},"15":{"start":{"line":24,"column":8},"end":{"line":24,"column":36}},"16":{"start":{"line":27,"column":0},"end":{"line":50,"column":3}},"17":{"start":{"line":28,"column":20},"end":{"line":28,"column":34}},"18":{"start":{"line":29,"column":23},"end":{"line":29,"column":33}},"19":{"start":{"line":30,"column":4},"end":{"line":49,"column":5}},"20":{"start":{"line":31,"column":8},"end":{"line":31,"column":25}},"21":{"start":{"line":32,"column":27},"end":{"line":32,"column":42}},"22":{"start":{"line":34,"column":8},"end":{"line":34,"column":141}},"23":{"start":{"line":35,"column":8},"end":{"line":45,"column":9}},"24":{"start":{"line":36,"column":12},"end":{"line":36,"column":41}},"25":{"start":{"line":37,"column":12},"end":{"line":37,"column":29}},"26":{"start":{"line":40,"column":12},"end":{"line":44,"column":15}},"27":{"start":{"line":46,"column":8},"end":{"line":48,"column":10}},"28":{"start":{"line":51,"column":0},"end":{"line":51,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":26},"end":{"line":8,"column":27}},"loc":{"start":{"line":8,"column":41},"end":{"line":26,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":34},"end":{"line":27,"column":35}},"loc":{"start":{"line":27,"column":49},"end":{"line":50,"column":1}},"line":27}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":4},"end":{"line":25,"column":5}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":25,"column":5}},{"start":{"line":13,"column":4},"end":{"line":25,"column":5}}],"line":13},"1":{"loc":{"start":{"line":30,"column":4},"end":{"line":49,"column":5}},"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":49,"column":5}},{"start":{"line":30,"column":4},"end":{"line":49,"column":5}}],"line":30},"2":{"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":43}},"type":"binary-expr","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":23}},{"start":{"line":30,"column":27},"end":{"line":30,"column":43}}],"line":30},"3":{"loc":{"start":{"line":35,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":45,"column":9}},{"start":{"line":35,"column":8},"end":{"line":45,"column":9}}],"line":35}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":9,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":9},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"AutoReply.js","sourceRoot":"","sources":["AutoReply.ts"],"names":[],"mappings":";;AACA,qCAAqC;AACrC,mCAA+B;AAC/B,uEAAyE;AACzE,+CAA8C;AAE9C,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAE5B,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IACtC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;IAC/B,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;IACjB,MAAM,SAAS,GAAG,MAAM,2CAAgB;SACrC,qBAAqB,CAAC,GAAG,EAAE,uBAAW,CAAC,kBAAkB,CAAC,CAAC;IAC9D,IAAI,CAAC,cAAK,CAAC,SAAS,CAAC,EAAE;QACrB,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC;QACjC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;KAC7B;SAAM;QACL,MAAM,MAAM,GAAG,MAAM,2CAAgB,CAAC,MAAM,CAAC;YAC3C,GAAG,EAAE,uBAAW,CAAC,kBAAkB;YACnC,GAAG;YACH,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QAC9B,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;KAC7B;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IAC9C,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;IAC/B,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAC9B,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,EAAE;QACvC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;QACjB,MAAM,UAAU,GAAG,MAAM,KAAK,IAAI,CAAC;QACnC,IAAI,SAA6B,CAAC;QAClC,SAAS,GAAG,MAAM,2CAAgB,CAAC,qBAAqB,CAAC,GAAG,EAAE,uBAAW,CAAC,kBAAkB,CAAC,CAAC;QAC9F,IAAI,CAAC,cAAK,CAAC,SAAS,CAAC,EAAE;YACrB,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC;YAC7B,SAAS,CAAC,IAAI,EAAE,CAAC;SAClB;aAAM;YACL,SAAS,GAAG,MAAM,2CAAgB,CAAC,MAAM,CAAC;gBACxC,GAAG,EAAE,uBAAW,CAAC,kBAAkB;gBACnC,GAAG;gBACH,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;SACJ;QACD,GAAG,CAAC,IAAI,GAAG;YACT,OAAO,EAAE,IAAI;SACd,CAAC;KACH;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Boom  from 'boom';\nimport * as Router from 'koa-router';\nimport { isNil } from 'lodash';\nimport { configRepository, ConfigModel } from 'lexica-dialog-repository';\nimport { CONFIG_KEYS } from '../../Constants';\n\nconst router = new Router();\n\nrouter.get('/auto-reply', async (ctx) => {\n  const { uni } = ctx.state.user;\n  ctx.status = 200;\n  const autoReply = await configRepository\n    .findConfigByUniAndKey(uni, CONFIG_KEYS.SUSPEND_AUTO_REPLY);\n  if (!isNil(autoReply)) {\n    const { key, value } = autoReply;\n    ctx.body = { [key]: value };\n  } else {\n    const result = await configRepository.create({\n      key: CONFIG_KEYS.SUSPEND_AUTO_REPLY,\n      uni,\n      value: false,\n    });\n    const { key, value } = result;\n    ctx.body = { [key]: value };\n  }\n});\n\nrouter.put('/auto-reply/:status', async (ctx) => {\n  const { uni } = ctx.state.user;\n  const { status } = ctx.params;\n  if (status === 'on' || status === 'off') {\n    ctx.status = 200;\n    const nextStatus = status !== 'on';\n    let autoReply: ConfigModel | null;\n    autoReply = await configRepository.findConfigByUniAndKey(uni, CONFIG_KEYS.SUSPEND_AUTO_REPLY);\n    if (!isNil(autoReply)) {\n      autoReply.value = nextStatus;\n      autoReply.save();\n    } else {\n      autoReply = await configRepository.create({\n        key: CONFIG_KEYS.SUSPEND_AUTO_REPLY,\n        uni,\n        value: nextStatus,\n      });\n    }\n    ctx.body = {\n      message: 'ok',\n    };\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e2110b8b9900c8f99647a8ac5385438b241ca816"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/controls/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/controls/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":42}},"3":{"start":{"line":5,"column":15},"end":{"line":7,"column":2}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":25}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,2CAA0D;AAE1D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,WAAW;CACpB,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,mBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;AAEtC,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { default as suspendAutoReply } from './AutoReply';\n\nconst router = new Router({\n  prefix: '/controls',\n});\n\nrouter.use(suspendAutoReply.routes());\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"2c50bb4c57a1fb5891dc702aa51e650e18a7f182"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Activities.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Activities.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":41},"end":{"line":5,"column":97}},"4":{"start":{"line":6,"column":31},"end":{"line":6,"column":64}},"5":{"start":{"line":7,"column":15},"end":{"line":9,"column":2}},"6":{"start":{"line":10,"column":0},"end":{"line":28,"column":3}},"7":{"start":{"line":11,"column":101},"end":{"line":11,"column":104}},"8":{"start":{"line":12,"column":17},"end":{"line":12,"column":27}},"9":{"start":{"line":13,"column":21},"end":{"line":14,"column":61}},"10":{"start":{"line":15,"column":4},"end":{"line":26,"column":5}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":29}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":93}},"13":{"start":{"line":20,"column":8},"end":{"line":25,"column":11}},"14":{"start":{"line":27,"column":4},"end":{"line":27,"column":20}},"15":{"start":{"line":29,"column":0},"end":{"line":52,"column":3}},"16":{"start":{"line":30,"column":101},"end":{"line":30,"column":104}},"17":{"start":{"line":31,"column":17},"end":{"line":31,"column":27}},"18":{"start":{"line":32,"column":21},"end":{"line":33,"column":61}},"19":{"start":{"line":34,"column":4},"end":{"line":50,"column":5}},"20":{"start":{"line":35,"column":8},"end":{"line":40,"column":9}},"21":{"start":{"line":36,"column":12},"end":{"line":36,"column":46}},"22":{"start":{"line":39,"column":12},"end":{"line":39,"column":78}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":93}},"24":{"start":{"line":44,"column":8},"end":{"line":49,"column":11}},"25":{"start":{"line":51,"column":4},"end":{"line":51,"column":20}},"26":{"start":{"line":53,"column":0},"end":{"line":53,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":102},"end":{"line":10,"column":103}},"loc":{"start":{"line":10,"column":117},"end":{"line":28,"column":1}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":120},"end":{"line":29,"column":121}},"loc":{"start":{"line":29,"column":135},"end":{"line":52,"column":1}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":4},"end":{"line":26,"column":5}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":26,"column":5}},{"start":{"line":15,"column":4},"end":{"line":26,"column":5}}],"line":15},"1":{"loc":{"start":{"line":34,"column":4},"end":{"line":50,"column":5}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":50,"column":5}},{"start":{"line":34,"column":4},"end":{"line":50,"column":5}}],"line":34},"2":{"loc":{"start":{"line":35,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":40,"column":9}},{"start":{"line":35,"column":8},"end":{"line":40,"column":9}}],"line":35}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":9,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":9},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"file":"Activities.js","sourceRoot":"","sources":["Activities.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,mCAA+B;AAC/B,kGAA+F;AAC/F,iEAA8D;AAE9D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,gBAAgB;CACzB,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,2CAAoB,CAAC,EAAE,uBAAuB,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IAC3F,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,EACH,EAAE,EAAE,MAAM,GACX,EACD,UAAU,EAAE,EACV,EAAE,EAAE,YAAY,EAChB,QAAQ,GACT,GACF,GACF,GAAG,GAAG,CAAC;IACR,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,MAAM,QAAQ,GACZ,MAAM,+DAA8B;SACjC,8BAA8B,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAC1D,IAAI,CAAC,cAAK,CAAC,QAAQ,CAAC,EAAE;QACpB,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,MAAM,+DAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACrD;SAAM;QACL,MAAM,+DAA8B,CAAC,MAAM,CAAC;YAC1C,IAAI,EAAE,IAAI;YACV,YAAY;YACZ,oBAAoB,EAAE,CAAC;YACvB,MAAM;SACP,CAAC,CAAC;KACJ;IACD,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CACT,yBAAyB,EACzB,2CAAoB,CAAC,EAAE,uBAAuB,EAAE,KAAK,EAAE,CAAC,EACxD,KAAK,EAAE,GAAG,EAAE,EAAE;IACZ,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,EACH,EAAE,EAAE,MAAM,GACX,EACD,UAAU,EAAE,EACV,EAAE,EAAE,YAAY,EAChB,QAAQ,GACT,GACF,GACF,GAAG,GAAG,CAAC;IACR,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,MAAM,QAAQ,GACZ,MAAM,+DAA8B;SACjC,8BAA8B,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAC1D,IAAI,CAAC,cAAK,CAAC,QAAQ,CAAC,EAAE;QACpB,IAAI,cAAK,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;YACxC,QAAQ,CAAC,oBAAoB,GAAG,CAAC,CAAC;SACnC;aAAM;YACL,QAAQ,CAAC,oBAAoB,GAAG,QAAQ,CAAC,oBAAoB,GAAG,CAAC,CAAC;SACnE;QACD,MAAM,+DAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACrD;SAAM;QACL,MAAM,+DAA8B,CAAC,MAAM,CAAC;YAC1C,IAAI,EAAE,IAAI;YACV,YAAY;YACZ,oBAAoB,EAAE,CAAC;YACvB,MAAM;SACP,CAAC,CAAC;KACJ;IACD,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAClB,CAAC,CAAC,CAAC;AAEL,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { isNil } from 'lodash';\nimport { conversationActivityRepository } from './repositories/ConversationActivityRepository';\nimport { senderInfoMiddleware } from './SenderInfoMiddleware';\n\nconst router = new Router({\n  prefix: '/:senderInfoId',\n});\n\nrouter.post('/seen', senderInfoMiddleware({ notFoundReturnEmptyPage: false }), async (ctx) => {\n  const {\n    state: {\n      user: {\n        uni,\n        id: userId,\n      },\n      senderInfo: {\n        id: senderInfoId,\n        senderId,\n      },\n    },\n  } = ctx;\n  const date = new Date();\n  const activity =\n    await conversationActivityRepository\n      .findOneByUserIdAndSenderInfoId(userId, senderInfoId);\n  if (!isNil(activity)) {\n    activity.seen = date;\n    await conversationActivityRepository.save(activity);\n  } else {\n    await conversationActivityRepository.create({\n      seen: date,\n      senderInfoId,\n      suggestedAnswerClick: 0,\n      userId,\n    });\n  }\n  ctx.body = 'ok';\n});\n\nrouter.post(\n  '/suggested-answer-click',\n  senderInfoMiddleware({ notFoundReturnEmptyPage: false }),\n  async (ctx) => {\n    const {\n      state: {\n        user: {\n          uni,\n          id: userId,\n        },\n        senderInfo: {\n          id: senderInfoId,\n          senderId,\n        },\n      },\n    } = ctx;\n    const date = new Date();\n    const activity =\n      await conversationActivityRepository\n        .findOneByUserIdAndSenderInfoId(userId, senderInfoId);\n    if (!isNil(activity)) {\n      if (isNil(activity.suggestedAnswerClick)) {\n        activity.suggestedAnswerClick = 1;\n      } else {\n        activity.suggestedAnswerClick = activity.suggestedAnswerClick + 1;\n      }\n      await conversationActivityRepository.save(activity);\n    } else {\n      await conversationActivityRepository.create({\n        seen: date,\n        senderInfoId,\n        suggestedAnswerClick: 1,\n        userId,\n      });\n    }\n    ctx.body = 'ok';\n  });\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"dc0adfc76ef9435b62df106e6d15f63a063b395d"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Conversations.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Conversations.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":19},"end":{"line":6,"column":38}},"5":{"start":{"line":7,"column":35},"end":{"line":7,"column":70}},"6":{"start":{"line":8,"column":41},"end":{"line":8,"column":97}},"7":{"start":{"line":9,"column":15},"end":{"line":9,"column":27}},"8":{"start":{"line":11,"column":26},"end":{"line":164,"column":1}},"9":{"start":{"line":12,"column":22},"end":{"line":12,"column":24}},"10":{"start":{"line":13,"column":4},"end":{"line":17,"column":7}},"11":{"start":{"line":18,"column":4},"end":{"line":46,"column":5}},"12":{"start":{"line":19,"column":8},"end":{"line":45,"column":9}},"13":{"start":{"line":20,"column":12},"end":{"line":24,"column":15}},"14":{"start":{"line":27,"column":24},"end":{"line":27,"column":91}},"15":{"start":{"line":28,"column":27},"end":{"line":28,"column":48}},"16":{"start":{"line":29,"column":12},"end":{"line":44,"column":15}},"17":{"start":{"line":47,"column":4},"end":{"line":54,"column":7}},"18":{"start":{"line":55,"column":4},"end":{"line":64,"column":5}},"19":{"start":{"line":56,"column":8},"end":{"line":63,"column":11}},"20":{"start":{"line":65,"column":4},"end":{"line":67,"column":7}},"21":{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},"22":{"start":{"line":69,"column":8},"end":{"line":71,"column":11}},"23":{"start":{"line":73,"column":4},"end":{"line":90,"column":7}},"24":{"start":{"line":91,"column":4},"end":{"line":110,"column":5}},"25":{"start":{"line":92,"column":8},"end":{"line":109,"column":11}},"26":{"start":{"line":111,"column":4},"end":{"line":155,"column":7}},"27":{"start":{"line":156,"column":4},"end":{"line":162,"column":5}},"28":{"start":{"line":157,"column":8},"end":{"line":161,"column":11}},"29":{"start":{"line":163,"column":4},"end":{"line":163,"column":21}},"30":{"start":{"line":165,"column":0},"end":{"line":189,"column":3}},"31":{"start":{"line":166,"column":63},"end":{"line":166,"column":66}},"32":{"start":{"line":167,"column":30},"end":{"line":167,"column":39}},"33":{"start":{"line":168,"column":29},"end":{"line":172,"column":7}},"34":{"start":{"line":173,"column":22},"end":{"line":173,"column":39}},"35":{"start":{"line":174,"column":4},"end":{"line":184,"column":5}},"36":{"start":{"line":175,"column":22},"end":{"line":180,"column":9}},"37":{"start":{"line":176,"column":64},"end":{"line":179,"column":13}},"38":{"start":{"line":181,"column":8},"end":{"line":183,"column":102}},"39":{"start":{"line":183,"column":39},"end":{"line":183,"column":79}},"40":{"start":{"line":185,"column":4},"end":{"line":188,"column":14}},"41":{"start":{"line":186,"column":29},"end":{"line":186,"column":72}},"42":{"start":{"line":187,"column":12},"end":{"line":187,"column":138}},"43":{"start":{"line":190,"column":0},"end":{"line":190,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":26},"end":{"line":11,"column":27}},"loc":{"start":{"line":11,"column":54},"end":{"line":164,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":165,"column":16},"end":{"line":165,"column":17}},"loc":{"start":{"line":165,"column":31},"end":{"line":189,"column":1}},"line":165},"2":{"name":"(anonymous_2)","decl":{"start":{"line":176,"column":47},"end":{"line":176,"column":48}},"loc":{"start":{"line":176,"column":64},"end":{"line":179,"column":13}},"line":176},"3":{"name":"(anonymous_3)","decl":{"start":{"line":183,"column":20},"end":{"line":183,"column":21}},"loc":{"start":{"line":183,"column":39},"end":{"line":183,"column":79}},"line":183},"4":{"name":"(anonymous_4)","decl":{"start":{"line":185,"column":93},"end":{"line":185,"column":94}},"loc":{"start":{"line":185,"column":111},"end":{"line":188,"column":9}},"line":185}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":4},"end":{"line":46,"column":5}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":46,"column":5}},{"start":{"line":18,"column":4},"end":{"line":46,"column":5}}],"line":18},"1":{"loc":{"start":{"line":19,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":45,"column":9}},{"start":{"line":19,"column":8},"end":{"line":45,"column":9}}],"line":19},"2":{"loc":{"start":{"line":55,"column":4},"end":{"line":64,"column":5}},"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":64,"column":5}},{"start":{"line":55,"column":4},"end":{"line":64,"column":5}}],"line":55},"3":{"loc":{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},{"start":{"line":68,"column":4},"end":{"line":72,"column":5}}],"line":68},"4":{"loc":{"start":{"line":91,"column":4},"end":{"line":110,"column":5}},"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":110,"column":5}},{"start":{"line":91,"column":4},"end":{"line":110,"column":5}}],"line":91},"5":{"loc":{"start":{"line":156,"column":4},"end":{"line":162,"column":5}},"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":162,"column":5}},{"start":{"line":156,"column":4},"end":{"line":162,"column":5}}],"line":156},"6":{"loc":{"start":{"line":174,"column":4},"end":{"line":184,"column":5}},"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":184,"column":5}},{"start":{"line":174,"column":4},"end":{"line":184,"column":5}}],"line":174},"7":{"loc":{"start":{"line":187,"column":73},"end":{"line":187,"column":126}},"type":"cond-expr","locations":[{"start":{"line":187,"column":101},"end":{"line":187,"column":114}},{"start":{"line":187,"column":117},"end":{"line":187,"column":126}}],"line":187}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":9,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":9},"f":{"0":0,"1":0,"2":0,"3":0,"4":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"Conversations.js","sourceRoot":"","sources":["Conversations.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Router from 'koa-router';\nimport * as Boom from 'boom';\nimport { Map } from 'immutable';\nimport { omit, escapeRegExp, isNil } from 'lodash';\nimport { Types } from 'mongoose';\nimport {\n  Status,\n} from 'lexica-dialog-model/dist/Issue';\nimport {\n  issueRepository,\n  senderInfoRepository,\n  SortDirection,\n} from 'lexica-dialog-repository';\nimport { ConversationActivity } from './models/ConversationActivity';\nimport { conversationActivityRepository } from './repositories/ConversationActivityRepository';\n\nconst router = new Router();\n\ninterface AggregateArgument {\n  uni: string,\n  status?: Status,\n  query?: string,\n};\n\nconst aggregateComposer = ({ uni, status, query }: AggregateArgument) => {\n  const aggregate = [];\n  aggregate.push({\n    $match: {\n      uni,\n    },\n  });\n  if (!isNil(query)) {\n    if (Types.ObjectId.isValid(query)) {\n      aggregate.push({\n        $match: {\n          _id: new Types.ObjectId(query),\n        },\n      });\n    } else {\n      const str = query.toLowerCase().split(' ').map(escapeRegExp).join('|');\n      const regexp = new RegExp(str, 'ig');\n      aggregate.push({\n        $match: {\n          $or: [\n            {\n              firstName: {\n                $regex: regexp,\n              },\n            },\n            {\n              lastName: {\n                $regex: regexp,\n              },\n            },\n          ],\n        },\n      });\n    }\n  }\n  aggregate.push(\n    {\n      $lookup: {\n        as: 'message',\n        foreignField: 'senderId',\n        from: 'Messages',\n        localField: 'senderId',\n      },\n    },\n  );\n  if (!isNil(status)) {\n    aggregate.push(\n      {\n        $lookup: {\n          as: 'issue',\n          foreignField: 'senderId',\n          from: 'Issues',\n          localField: 'senderId',\n        },\n      },\n    );\n  }\n  aggregate.push(\n    {\n      $unwind: '$message',\n    },\n  );\n  if (!isNil(status)) {\n    aggregate.push(\n      {\n        $unwind: '$issue',\n      },\n    );\n  }\n  aggregate.push(\n    {\n      $redact: {\n        $cond: {\n          else: '$$PRUNE',\n          if: {\n            $and: [\n              {\n                $eq: ['$uni', '$message.uni'],\n              },\n              {\n                $eq: ['$messenger', '$message.messenger'],\n              },\n            ],\n          },\n          then: '$$KEEP',\n        },\n      },\n    },\n  );\n  if (!isNil(status)) {\n    aggregate.push(\n      {\n        $redact: {\n          $cond: {\n            else: '$$PRUNE',\n            if: {\n              $and: [\n                {\n                  $eq: ['$uni', '$issue.uni'],\n                },\n                {\n                  $eq: ['$messenger', '$issue.messenger'],\n                },\n              ],\n            },\n            then: '$$KEEP',\n          },\n        },\n      },\n    );\n  }\n  aggregate.push(\n    {\n      $group: {\n        _id: {\n          firstName: '$firstName',\n          id: '$_id',\n          lastName: '$lastName',\n          messenger: '$messenger',\n          middleName: '$middleName',\n        },\n        lastUpdatedDate: {\n          $last: '$message.date',\n        },\n        statusSet: {\n          $addToSet: '$issue.status',\n        },\n      },\n    },\n    {\n      $project: {\n        firstName: '$_id.firstName',\n        id: '$_id.id',\n        lastName: '$_id.lastName',\n        lastUpdatedDate: '$lastUpdatedDate',\n        messenger: '$_id.messenger',\n        middleName: '$_id.middleName',\n        status: {\n          $switch: {\n            branches: [\n              {\n                case: {\n                  $setIsSubset: [['OPEN'], '$statusSet'],\n                },\n                then: 'OPEN',\n              },\n              {\n                case: {\n                  $setIsSubset: [['CLOSED'], '$statusSet'],\n                },\n                then: 'CLOSED',\n              },\n            ],\n            default: 'UNKNOWN',\n          },\n        },\n      },\n    },\n  );\n  if (!isNil(status)) {\n    aggregate.push(\n      {\n        $match: {\n          status,\n        },\n      },\n    );\n  }\n  return aggregate;\n};\n\nrouter.get('/', async (ctx) => {\n  const { state: { user: { id: userId, uni }, pageable } } = ctx;\n  const { status, query } = ctx.query as AggregateArgument;\n  const conversationPage =\n    await senderInfoRepository.aggregatePage(pageable, aggregateComposer({\n      query,\n      status,\n      uni,\n    }));\n\n  // TODO: Fix it when MongoDB allow type conversion in aggregate.\n  let activityMap = Map<string, ConversationActivity>();\n  if (conversationPage.elements.length > 0) {\n    const query = {\n      $or: conversationPage.elements.map(conversation => ({\n        senderInfoId: conversation.id,\n        userId,\n      })),\n    };\n    activityMap = (await conversationActivityRepository\n      .find(query))\n      .reduce(\n      (map, activity) => map.set(activity.senderInfoId, activity),\n      Map<string, ConversationActivity>({}),\n    );\n  }\n  ctx.body = {\n    ...conversationPage,\n    elements: conversationPage.elements.map((conversation) => {\n      const activity = activityMap.get(conversation.id.toString());\n      return omit(\n        {\n          ...conversation,\n          seen: !isNil(activity) ? activity.seen : undefined,\n        },\n        '_id',\n      );\n    }),\n  };\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"981ce7708d89c77cbbb85bc6fc316dfef9f9697c"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/EmailForward.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/EmailForward.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":12},"end":{"line":5,"column":26}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":46}},"5":{"start":{"line":7,"column":31},"end":{"line":7,"column":80}},"6":{"start":{"line":8,"column":15},"end":{"line":14,"column":2}},"7":{"start":{"line":15,"column":15},"end":{"line":17,"column":2}},"8":{"start":{"line":18,"column":12},"end":{"line":21,"column":2}},"9":{"start":{"line":22,"column":0},"end":{"line":46,"column":3}},"10":{"start":{"line":23,"column":69},"end":{"line":23,"column":72}},"11":{"start":{"line":24,"column":19},"end":{"line":43,"column":5}},"12":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"13":{"start":{"line":45,"column":4},"end":{"line":45,"column":20}},"14":{"start":{"line":47,"column":0},"end":{"line":47,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":76},"end":{"line":22,"column":77}},"loc":{"start":{"line":22,"column":91},"end":{"line":46,"column":1}},"line":22}},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":0,"11":0,"12":0,"13":0,"14":9},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"file":"EmailForward.js","sourceRoot":"","sources":["EmailForward.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,+BAA+B;AAC/B,2BAA2B;AAC3B,+CAA8C;AAC9C,iFAAoF;AAEpF,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC/B,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,CAAC;IACvD,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7B,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,CAAC;IACtD,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE;CAClE,CAAC,CAAC;AAEH,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,QAAQ;CACjB,CAAC,CAAC;AAEH,MAAM,GAAG,GAAY,IAAI,GAAG,CAAC,GAAG,CAAC;IAC/B,UAAU,EAAE,uBAAW,CAAC,2BAA2B;IACnD,MAAM,EAAE,uBAAW,CAAC,sBAAsB;CAC3C,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CACT,GAAG,EACH,iDAA0B,CAAC,MAAM,CAAC,EAClC,KAAK,EAAE,GAAG,EAAE,EAAE;IACZ,MAAM,EACJ,OAAO,EAAE,EACP,IAAI,EAAE,EACJ,EAAE,EACF,EAAE,EACF,GAAG,EACH,OAAO,EACP,IAAI,GACL,GACF,GACF,GAAG,GAAG,CAAC;IACR,MAAM,MAAM,GAAG;QACb,WAAW,EAAE;YACX,YAAY,EAAE,GAAG;YACjB,WAAW,EAAE,EAAE;YACf,WAAW,EAAE,EAAE;SAChB;QACD,OAAO,EAAE;YACP,IAAI,EAAE;gBACJ,IAAI,EAAE;oBACJ,OAAO,EAAE,OAAO;oBAChB,IAAI,EAAE,IAAI;iBACX;aACF;YACD,OAAO,EAAE;gBACP,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,OAAO;aACd;SACF;QACD,MAAM,EAAE,uBAAW,CAAC,sBAAsB;KAC3C,CAAC;IACF,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IACtC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAClB,CAAC,CACF,CAAC;AAEF,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport * as AWS from 'aws-sdk';\nimport * as Joi from 'joi';\nimport { ENV_CONFIGS } from '../../Constants';\nimport { createValidationMiddleware } from '../../middlewares/ValidationMiddleware';\n\nconst schema = Joi.object().keys({\n  bcc: Joi.array().items(Joi.string().email().required()),\n  body: Joi.string().required(),\n  cc: Joi.array().items(Joi.string().email().required()),\n  subject: Joi.string().required(),\n  to: Joi.array().items(Joi.string().email().required()).required(),\n});\n\nconst router = new Router({\n  prefix: '/email',\n});\n\nconst ses: AWS.SES = new AWS.SES({\n  apiVersion: ENV_CONFIGS.AWS_CHATBOT_SES_API_VERSION,\n  region: ENV_CONFIGS.AWS_CHATBOT_SES_REGION,\n});\n\nrouter.post(\n  '/',\n  createValidationMiddleware(schema),\n  async (ctx) => {\n    const {\n      request: {\n        body: {\n          to,\n          cc,\n          bcc,\n          subject,\n          body,\n        },\n      },\n    } = ctx;\n    const params = {\n      Destination: {\n        BccAddresses: bcc,\n        CcAddresses: cc,\n        ToAddresses: to,\n      },\n      Message: {\n        Body: {\n          Html: {\n            Charset: 'UTF-8',\n            Data: body,\n          },\n        },\n        Subject: {\n          Charset: 'UTF-8',\n          Data: subject,\n        },\n      },\n      Source: ENV_CONFIGS.AWS_CHATBOT_SES_SENDER,\n    };\n    await ses.sendEmail(params).promise();\n    ctx.body = 'ok';\n  },\n);\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e76fa943e3cb234008791a0de83298d3e384aa80"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/FileDownloader.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/FileDownloader.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":31},"end":{"line":4,"column":64}},"3":{"start":{"line":5,"column":28},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":26},"end":{"line":6,"column":70}},"5":{"start":{"line":7,"column":20},"end":{"line":7,"column":46}},"6":{"start":{"line":8,"column":12},"end":{"line":8,"column":30}},"7":{"start":{"line":9,"column":13},"end":{"line":9,"column":28}},"8":{"start":{"line":11,"column":11},"end":{"line":13,"column":2}},"9":{"start":{"line":14,"column":15},"end":{"line":16,"column":2}},"10":{"start":{"line":17,"column":0},"end":{"line":45,"column":3}},"11":{"start":{"line":18,"column":90},"end":{"line":18,"column":93}},"12":{"start":{"line":19,"column":24},"end":{"line":19,"column":44}},"13":{"start":{"line":20,"column":24},"end":{"line":20,"column":51}},"14":{"start":{"line":21,"column":4},"end":{"line":44,"column":5}},"15":{"start":{"line":22,"column":8},"end":{"line":22,"column":32}},"16":{"start":{"line":25,"column":26},"end":{"line":25,"column":46}},"17":{"start":{"line":26,"column":27},"end":{"line":29,"column":9}},"18":{"start":{"line":30,"column":8},"end":{"line":43,"column":11}},"19":{"start":{"line":31,"column":12},"end":{"line":31,"column":29}},"20":{"start":{"line":32,"column":12},"end":{"line":32,"column":35}},"21":{"start":{"line":33,"column":12},"end":{"line":42,"column":15}},"22":{"start":{"line":36,"column":16},"end":{"line":36,"column":33}},"23":{"start":{"line":37,"column":16},"end":{"line":37,"column":28}},"24":{"start":{"line":41,"column":16},"end":{"line":41,"column":26}},"25":{"start":{"line":46,"column":0},"end":{"line":46,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":142},"end":{"line":17,"column":143}},"loc":{"start":{"line":17,"column":157},"end":{"line":45,"column":1}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":30,"column":26},"end":{"line":30,"column":27}},"loc":{"start":{"line":30,"column":47},"end":{"line":43,"column":9}},"line":30},"2":{"name":"(anonymous_2)","decl":{"start":{"line":35,"column":29},"end":{"line":35,"column":30}},"loc":{"start":{"line":35,"column":38},"end":{"line":38,"column":13}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":27},"end":{"line":40,"column":28}},"loc":{"start":{"line":40,"column":33},"end":{"line":42,"column":13}},"line":40}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":4},"end":{"line":44,"column":5}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":44,"column":5}},{"start":{"line":21,"column":4},"end":{"line":44,"column":5}}],"line":21}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":9},"f":{"0":0,"1":0,"2":0,"3":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"FileDownloader.js","sourceRoot":"","sources":["FileDownloader.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,iEAA8D;AAC9D,2DAAwD;AACxD,uEAAwF;AAGxF,+CAA8C;AAC9C,+BAA+B;AAE/B,6BAA6B;AAM5B,CAAC;AAEF,MAAM,EAAE,GAAW,IAAI,GAAG,CAAC,EAAE,CAAC;IAC5B,UAAU,EAAE,uBAAW,CAAC,0BAA0B;CACnD,CAAC,CAAC;AAEH,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,yCAAyC;CAClD,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CACR,GAAG,EACH,oCAAkB,EAClB,2CAAoB,EAAE,EACtB,qCAAiB,EAAE,EACnB,KAAK,EAAE,GAAG,EAAE,EAAE;IACZ,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,GACJ,EACD,UAAU,EAAE,EACV,QAAQ,GACT,EACD,QAAQ,EACR,OAAO,GACR,GACF,GAAG,GAAG,CAAC;IACR,MAAM,WAAW,GAAW,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IACjD,MAAM,WAAW,GAAW,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;IACxD,IAAI,WAAW,KAAK,MAAM,EAAE;QAC1B,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;KACzB;SAAM;QACL,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;QACvC,MAAM,UAAU,GAAuB;YACrC,MAAM,EAAE,uBAAW,CAAC,qBAAqB;YACzC,GAAG,EAAE,SAAS;SACf,CAAC;QACF,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACpC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YACjB,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC;YACvB,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;iBACrB,gBAAgB,EAAE;iBAClB,EAAE,CAAC,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE;gBACxB,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;gBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC;iBACD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC;iBACtB,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACd,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC;AAEL,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { senderInfoMiddleware } from './SenderInfoMiddleware';\nimport { messageMiddleware } from './MessageMiddleware';\nimport { tokenMiddleware, composedMiddleware } from '../../middlewares/TokenMiddleware';\nimport { createKaoJwtMiddleware } from '../../middlewares/KoaJwtMiddleware';\nimport * as compose from 'koa-compose';\nimport { ENV_CONFIGS } from '../../Constants';\nimport * as AWS from 'aws-sdk';\nimport * as fs from 'fs';\nimport * as Boom from 'boom';\nimport { resolve } from 'url';\n\ninterface FileLocationParams {\n  Bucket: string,\n  Key: string,\n};\n\nconst s3: AWS.S3 = new AWS.S3({\n  apiVersion: ENV_CONFIGS.AWS_CHATBOT_S3_API_VERSION,\n});\n\nconst router = new Router({\n  prefix: '/:senderInfoId/messages/:messageId/file',\n});\n\nrouter.get(\n  '/',\n  composedMiddleware,\n  senderInfoMiddleware(),\n  messageMiddleware(),\n  async (ctx) => {\n    const {\n      state: {\n        user: {\n          uni,\n        },\n        senderInfo: {\n          senderId,\n        },\n        pageable,\n        message,\n      },\n    } = ctx;\n    const messageType: string = message.request.type;\n    const contentType: string = message.request.contentType;\n    if (messageType === 'TEXT') {\n      throw Boom.badRequest();\n    } else {\n      const bucketKey = message.request.path;\n      const s3FilePath: FileLocationParams = {\n        Bucket: ENV_CONFIGS.AWS_CHATBOT_S3_BUCKET,\n        Key: bucketKey,\n      };\n      await new Promise((resolve, reject) => {\n        ctx.status = 200;\n        ctx.type = contentType;\n        s3.getObject(s3FilePath)\n          .createReadStream()\n          .on('error', (err: any) => {\n            ctx.status = 500;\n            reject(err);\n          })\n          .pipe(ctx.response.res)\n          .on('end', () => {\n            resolve();\n          });\n      });\n    }\n  });\n\nexport default router;\n\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"615926b4fbea704578528f23fda4afc044a8c4f1"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Issues.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Issues.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":57}},"4":{"start":{"line":6,"column":35},"end":{"line":6,"column":70}},"5":{"start":{"line":7,"column":31},"end":{"line":7,"column":64}},"6":{"start":{"line":8,"column":15},"end":{"line":10,"column":2}},"7":{"start":{"line":11,"column":0},"end":{"line":25,"column":3}},"8":{"start":{"line":12,"column":81},"end":{"line":12,"column":84}},"9":{"start":{"line":13,"column":19},"end":{"line":13,"column":133}},"10":{"start":{"line":14,"column":4},"end":{"line":24,"column":5}},"11":{"start":{"line":15,"column":8},"end":{"line":19,"column":12}},"12":{"start":{"line":16,"column":12},"end":{"line":16,"column":42}},"13":{"start":{"line":17,"column":12},"end":{"line":17,"column":49}},"14":{"start":{"line":18,"column":12},"end":{"line":18,"column":67}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":24}},"16":{"start":{"line":23,"column":8},"end":{"line":23,"column":49}},"17":{"start":{"line":26,"column":0},"end":{"line":26,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":103},"end":{"line":11,"column":104}},"loc":{"start":{"line":11,"column":118},"end":{"line":25,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":37},"end":{"line":15,"column":38}},"loc":{"start":{"line":15,"column":54},"end":{"line":19,"column":9}},"line":15}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":24,"column":5}},{"start":{"line":14,"column":4},"end":{"line":24,"column":5}}],"line":14}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":9},"f":{"0":0,"1":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"Issues.js","sourceRoot":"","sources":["Issues.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,6BAA6B;AAC7B,0DAEwC;AACxC,uEAEkC;AAClC,iEAA8D;AAE9D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,uBAAuB;CAChC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,2CAAoB,CAAC,EAAE,uBAAuB,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IAC5F,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,GACJ,EACH,UAAU,EAAE,EACR,QAAQ,GACT,EACH,QAAQ,GACP,GACF,GAAG,GAAG,CAAC;IACR,MAAM,MAAM,GAAG,MAAM,0CAAe,CAAC,6BAA6B,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAM,CAAC,IAAI,CAAC,CAAC;IAC/F,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC3C,KAAK,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,KAAK,CAAC,MAAM,GAAG,cAAM,CAAC,MAAM,CAAC;YAC7B,0CAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC,CAAC;QACJ,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;KACjB;SAAM;QACL,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;KAC1C;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport * as Boom from 'boom';\nimport {\n  Status,\n} from 'lexica-dialog-model/dist/Issue';\nimport {\n  issueRepository,\n} from 'lexica-dialog-repository';\nimport { senderInfoMiddleware } from './SenderInfoMiddleware';\n\nconst router = new Router({\n  prefix: '/:senderInfoId/issues',\n});\n\nrouter.post('/close', senderInfoMiddleware({ notFoundReturnEmptyPage: false }), async (ctx) => {\n  const {\n    state: {\n      user: {\n        uni,\n      },\n    senderInfo: {\n        senderId,\n      },\n    pageable,\n    },\n  } = ctx;\n  const issues = await issueRepository.findByUniAndSenderIdAndStatus(uni, senderId, Status.OPEN);\n  if (issues.length > 0) {\n    await Promise.all(issues.map(async (issue) => {\n      issue.closedDate = new Date();\n      issue.status = Status.CLOSED;\n      issueRepository.save(issue);\n    }));\n    ctx.body = 'ok';\n  } else {\n    throw Boom.badRequest('issue not found');\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"17c8bba8c7888e2e20c1ef9688912ade764d01ce"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/MessageMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/MessageMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":13},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":35},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":26},"end":{"line":20,"column":1}},"5":{"start":{"line":7,"column":23},"end":{"line":18,"column":5}},"6":{"start":{"line":8,"column":30},"end":{"line":8,"column":40}},"7":{"start":{"line":9,"column":24},"end":{"line":9,"column":38}},"8":{"start":{"line":10,"column":28},"end":{"line":10,"column":98}},"9":{"start":{"line":11,"column":8},"end":{"line":17,"column":9}},"10":{"start":{"line":12,"column":12},"end":{"line":12,"column":36}},"11":{"start":{"line":15,"column":12},"end":{"line":15,"column":44}},"12":{"start":{"line":16,"column":12},"end":{"line":16,"column":25}},"13":{"start":{"line":19,"column":4},"end":{"line":19,"column":22}},"14":{"start":{"line":21,"column":0},"end":{"line":21,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":26},"end":{"line":6,"column":27}},"loc":{"start":{"line":6,"column":32},"end":{"line":20,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":23},"end":{"line":7,"column":24}},"loc":{"start":{"line":7,"column":44},"end":{"line":18,"column":5}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":17,"column":9}},{"start":{"line":11,"column":8},"end":{"line":17,"column":9}}],"line":11},"1":{"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":66}},"type":"binary-expr","locations":[{"start":{"line":11,"column":12},"end":{"line":11,"column":39}},{"start":{"line":11,"column":43},"end":{"line":11,"column":66}}],"line":11}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":9,"14":9},"f":{"0":9,"1":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"file":"MessageMiddleware.js","sourceRoot":"","sources":["MessageMiddleware.ts"],"names":[],"mappings":";;AACA,6BAA6B;AAC7B,mCAA+B;AAI/B,uEAEkC;AAElC,MAAM,iBAAiB,GAAG,GAAG,EAAE;IAC7B,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;QAC/B,MAAM,WAAW,GAAG,MAAM,4CAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAChE,IAAI,cAAK,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,GAAG,KAAK,GAAG,EAAE;YACjD,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;SACzB;aAAM;YACL,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC;YAChC,MAAM,IAAI,EAAE,CAAC;SACd;IACH,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAGE,8CAAiB","sourcesContent":["import { Middleware, Context } from 'koa';\nimport * as Boom from 'boom';\nimport { isNil } from 'lodash';\nimport {\n    MessageType,\n  } from 'lexica-dialog-model/dist/Message';\nimport {\n    messageRepository,\n} from 'lexica-dialog-repository';\n\nconst messageMiddleware = () => {\n  const middleware: Middleware = async (ctx, next) => {\n    const { messageId } = ctx.params;\n    const { uni } = ctx.state.user;\n    const messageInfo = await messageRepository.findById(messageId);\n    if (isNil(messageInfo) || messageInfo.uni !== uni) {\n      throw Boom.badRequest();\n    } else {\n      ctx.state.message = messageInfo;\n      await next();\n    }\n  };\n  return middleware;\n};\n\nexport {\n    messageMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"d5c1cf2af5c5338b6a3edf8830a2ca544d375739"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Messages.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Messages.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":40}},"4":{"start":{"line":6,"column":17},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":18},"end":{"line":7,"column":61}},"6":{"start":{"line":8,"column":35},"end":{"line":8,"column":70}},"7":{"start":{"line":9,"column":15},"end":{"line":9,"column":63}},"8":{"start":{"line":10,"column":16},"end":{"line":10,"column":70}},"9":{"start":{"line":11,"column":31},"end":{"line":11,"column":64}},"10":{"start":{"line":12,"column":34},"end":{"line":12,"column":70}},"11":{"start":{"line":13,"column":31},"end":{"line":13,"column":64}},"12":{"start":{"line":14,"column":20},"end":{"line":14,"column":46}},"13":{"start":{"line":15,"column":15},"end":{"line":17,"column":2}},"14":{"start":{"line":18,"column":0},"end":{"line":18,"column":24}},"15":{"start":{"line":19,"column":26},"end":{"line":19,"column":63}},"16":{"start":{"line":20,"column":20},"end":{"line":22,"column":1}},"17":{"start":{"line":21,"column":4},"end":{"line":21,"column":93}},"18":{"start":{"line":21,"column":43},"end":{"line":21,"column":70}},"19":{"start":{"line":23,"column":18},"end":{"line":48,"column":1}},"20":{"start":{"line":26,"column":4},"end":{"line":38,"column":5}},"21":{"start":{"line":27,"column":8},"end":{"line":27,"column":31}},"22":{"start":{"line":28,"column":8},"end":{"line":28,"column":24}},"23":{"start":{"line":31,"column":8},"end":{"line":31,"column":32}},"24":{"start":{"line":32,"column":8},"end":{"line":37,"column":9}},"25":{"start":{"line":33,"column":12},"end":{"line":33,"column":29}},"26":{"start":{"line":36,"column":12},"end":{"line":36,"column":31}},"27":{"start":{"line":39,"column":4},"end":{"line":47,"column":6}},"28":{"start":{"line":49,"column":0},"end":{"line":49,"column":30}},"29":{"start":{"line":50,"column":0},"end":{"line":57,"column":3}},"30":{"start":{"line":51,"column":81},"end":{"line":51,"column":84}},"31":{"start":{"line":52,"column":24},"end":{"line":55,"column":6}},"32":{"start":{"line":56,"column":4},"end":{"line":56,"column":97}},"33":{"start":{"line":58,"column":0},"end":{"line":102,"column":3}},"34":{"start":{"line":59,"column":158},"end":{"line":59,"column":161}},"35":{"start":{"line":60,"column":21},"end":{"line":63,"column":5}},"36":{"start":{"line":64,"column":17},"end":{"line":64,"column":27}},"37":{"start":{"line":65,"column":4},"end":{"line":78,"column":5}},"38":{"start":{"line":66,"column":31},"end":{"line":66,"column":102}},"39":{"start":{"line":67,"column":8},"end":{"line":67,"column":65}},"40":{"start":{"line":68,"column":8},"end":{"line":77,"column":11}},"41":{"start":{"line":79,"column":29},"end":{"line":85,"column":17}},"42":{"start":{"line":81,"column":8},"end":{"line":81,"column":61}},"43":{"start":{"line":82,"column":8},"end":{"line":82,"column":35}},"44":{"start":{"line":83,"column":8},"end":{"line":83,"column":17}},"45":{"start":{"line":86,"column":4},"end":{"line":86,"column":63}},"46":{"start":{"line":87,"column":4},"end":{"line":96,"column":7}},"47":{"start":{"line":97,"column":4},"end":{"line":100,"column":5}},"48":{"start":{"line":98,"column":8},"end":{"line":98,"column":37}},"49":{"start":{"line":99,"column":8},"end":{"line":99,"column":69}},"50":{"start":{"line":101,"column":4},"end":{"line":101,"column":20}},"51":{"start":{"line":103,"column":0},"end":{"line":113,"column":3}},"52":{"start":{"line":104,"column":102},"end":{"line":104,"column":105}},"53":{"start":{"line":105,"column":20},"end":{"line":105,"column":90}},"54":{"start":{"line":106,"column":4},"end":{"line":112,"column":5}},"55":{"start":{"line":107,"column":8},"end":{"line":107,"column":34}},"56":{"start":{"line":108,"column":8},"end":{"line":108,"column":95}},"57":{"start":{"line":111,"column":8},"end":{"line":111,"column":30}},"58":{"start":{"line":114,"column":0},"end":{"line":114,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":20},"end":{"line":20,"column":21}},"loc":{"start":{"line":20,"column":33},"end":{"line":22,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":26},"end":{"line":21,"column":27}},"loc":{"start":{"line":21,"column":43},"end":{"line":21,"column":70}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":18},"end":{"line":23,"column":19}},"loc":{"start":{"line":23,"column":31},"end":{"line":48,"column":1}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":50,"column":63},"end":{"line":50,"column":64}},"loc":{"start":{"line":50,"column":78},"end":{"line":57,"column":1}},"line":50},"4":{"name":"(anonymous_4)","decl":{"start":{"line":58,"column":198},"end":{"line":58,"column":199}},"loc":{"start":{"line":58,"column":219},"end":{"line":102,"column":1}},"line":58},"5":{"name":"(anonymous_5)","decl":{"start":{"line":80,"column":13},"end":{"line":80,"column":14}},"loc":{"start":{"line":80,"column":20},"end":{"line":84,"column":5}},"line":80},"6":{"name":"(anonymous_6)","decl":{"start":{"line":103,"column":109},"end":{"line":103,"column":110}},"loc":{"start":{"line":103,"column":124},"end":{"line":113,"column":1}},"line":103}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":4},"end":{"line":38,"column":5}},"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":38,"column":5}},{"start":{"line":26,"column":4},"end":{"line":38,"column":5}}],"line":26},"1":{"loc":{"start":{"line":32,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":37,"column":9}},{"start":{"line":32,"column":8},"end":{"line":37,"column":9}}],"line":32},"2":{"loc":{"start":{"line":65,"column":4},"end":{"line":78,"column":5}},"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":78,"column":5}},{"start":{"line":65,"column":4},"end":{"line":78,"column":5}}],"line":65},"3":{"loc":{"start":{"line":70,"column":21},"end":{"line":70,"column":66}},"type":"cond-expr","locations":[{"start":{"line":70,"column":46},"end":{"line":70,"column":54}},{"start":{"line":70,"column":57},"end":{"line":70,"column":66}}],"line":70},"4":{"loc":{"start":{"line":89,"column":17},"end":{"line":89,"column":62}},"type":"cond-expr","locations":[{"start":{"line":89,"column":42},"end":{"line":89,"column":50}},{"start":{"line":89,"column":53},"end":{"line":89,"column":62}}],"line":89},"5":{"loc":{"start":{"line":97,"column":4},"end":{"line":100,"column":5}},"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":100,"column":5}},{"start":{"line":97,"column":4},"end":{"line":100,"column":5}}],"line":97},"6":{"loc":{"start":{"line":106,"column":4},"end":{"line":112,"column":5}},"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":112,"column":5}},{"start":{"line":106,"column":4},"end":{"line":112,"column":5}}],"line":106},"7":{"loc":{"start":{"line":106,"column":8},"end":{"line":106,"column":55}},"type":"binary-expr","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":32}},{"start":{"line":106,"column":36},"end":{"line":106,"column":55}}],"line":106}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":9,"14":9,"15":9,"16":9,"17":0,"18":0,"19":9,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":9,"29":9,"30":0,"31":0,"32":0,"33":9,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":9,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":9},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"Messages.js","sourceRoot":"","sources":["Messages.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Router from 'koa-router';\nimport * as Boom from 'boom';\nimport { List, Map } from 'immutable';\nimport { omit, omitBy, isEmpty, isNil } from 'lodash';\nimport {\n  MessageType,\n  ResponseType,\n  TextResponse,\n  Comment,\n} from 'lexica-dialog-model/dist/Message';\nimport {\n  Status,\n} from 'lexica-dialog-model/dist/Issue';\nimport {\n  Config,\n} from 'lexica-dialog-model/dist/Config';\nimport {\n  senderInfoRepository,\n  messageRepository,\n  configRepository,\n  issueRepository,\n  MessageModel,\n} from 'lexica-dialog-repository';\nimport { FacebookMessenger } from 'lexica-dialog-facebook-messenger/dist';\nimport { Response, MessagingType } from 'lexica-dialog-facebook-messenger/dist/Types';\nimport { senderInfoMiddleware } from './SenderInfoMiddleware';\nimport { newConversionMiddleware } from './NewConversionMiddleware';\nimport { uniConfigsMiddleware } from './UniConfigsMiddleware';\nimport { CONFIG_KEYS } from '../../Constants';\n\nconst router = new Router({\n  prefix: '/:senderInfoId/messages',\n});\n\nconst facebookMessenger = new FacebookMessenger('en-GB');\nconst toConfigMap = (configs: Config[]) => {\n  return configs.reduce((map, config) => map.set(config.key, config), Map<string, Config>({}));\n};\nconst transform = (message: MessageModel) => {\n  let body;\n  let sender;\n\n  if (message.type === MessageType.REQUEST) {\n    body = message.request;\n    sender = 'USER';\n  } else {\n    body = message.response;\n    if (isNil(message.sessionId)) {\n      sender = 'ADMIN';\n    } else {\n      sender = 'CHATBOT';\n    }\n  }\n\n  return {\n    body: omitBy(omit((body as any).toObject(), '_id'), isEmpty),\n    comment: message.comment,\n    date: message.date,\n    id: message.id,\n    issueId: message.issueId,\n    sender,\n    type: message.type,\n  };\n};\n\nrouter.get('/', senderInfoMiddleware(), async (ctx) => {\n  const {\n    state: {\n      user: {\n        uni,\n      },\n    senderInfo: {\n        senderId,\n      },\n    pageable,\n    },\n  } = ctx;\n  const messagePage = await messageRepository.findPage(\n    pageable,\n    {\n      senderId,\n      uni,\n    },\n  );\n  ctx.body = {\n    ...messagePage,\n    elements: messagePage.elements.map(transform),\n  };\n});\n\nrouter.post(\n  '/',\n  senderInfoMiddleware({ notFoundReturnEmptyPage: false }),\n  uniConfigsMiddleware(),\n  newConversionMiddleware(),\n  async (ctx, next) => {\n    const {\n      state: {\n      user: {\n        uni,\n      },\n      senderInfo: {\n        senderId,\n      },\n      issue,\n      systemMessage,\n      systemMessageDate,\n      uniConfigs,\n      },\n      request: {\n        body: {\n          message,\n        },\n      },\n    } = ctx;\n    const response: TextResponse = {\n      message: `${uniConfigs.get(CONFIG_KEYS.LIBRARIAN_INDICATOR).value}: ${message}`,\n      type: ResponseType.TEXT,\n    };\n    const date = new Date();\n\n    if (systemMessage) {\n      const systemResponse = facebookMessenger.response(\n        List<TextResponse>([systemMessage]), senderId,\n      );\n      await facebookMessenger.send(systemResponse, uniConfigs);\n      await messageRepository.create({\n        date: systemMessageDate,\n        issueId: !isNil(issue) ? issue.id : undefined,\n        messenger: facebookMessenger.name,\n        rawResponse: response,\n        response: systemMessage,\n        senderId,\n        type: MessageType.RESPONSE,\n        uni,\n      });\n    }\n\n    const facebookResponse = facebookMessenger.response(List<TextResponse>([response]), senderId)\n      .map((r: Response) => {\n        r.messaging_type = MessagingType.MESSAGE_TAG;\n        r.tag = 'ISSUE_RESOLUTION';\n        return r;\n      })\n      .toList();\n    await facebookMessenger.send(facebookResponse, uniConfigs);\n    await messageRepository.create({\n      date,\n      issueId: !isNil(issue) ? issue.id : undefined,\n      messenger: facebookMessenger.name,\n      rawResponse: response,\n      response,\n      senderId,\n      type: MessageType.RESPONSE,\n      uni,\n    });\n    if (!isNil(issue)) {\n      issue.lastUpdatedDate = date;\n      await issueRepository.save(issue);\n    }\n    ctx.body = 'ok';\n  },\n);\n\nrouter.patch(\n  '/:messageId',\n  senderInfoMiddleware({ notFoundReturnEmptyPage: false }),\n  async (ctx) => {\n    const {\n      state: {\n        user: {\n          uni,\n        },\n      },\n      request: {\n        body: {\n          comment,\n        },\n      },\n      params: {\n        messageId,\n      },\n    } = ctx;\n    const message = await messageRepository.findById(messageId);\n    if (!isNil(message) && message.uni === uni) {\n      message.comment = comment;\n      ctx.body = transform(await messageRepository.save(message));\n    } else {\n      throw Boom.notFound();\n    }\n  },\n);\n\nexport {\n  transform,\n  router,\n};\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"2f82fc06668bd736c4b5ea34af2accb006eeabda"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/NewConversionMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/NewConversionMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":57}},"3":{"start":{"line":5,"column":35},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":18},"end":{"line":6,"column":61}},"5":{"start":{"line":7,"column":14},"end":{"line":7,"column":52}},"6":{"start":{"line":8,"column":20},"end":{"line":8,"column":46}},"7":{"start":{"line":9,"column":32},"end":{"line":47,"column":1}},"8":{"start":{"line":10,"column":23},"end":{"line":45,"column":5}},"9":{"start":{"line":11,"column":98},"end":{"line":11,"column":101}},"10":{"start":{"line":12,"column":23},"end":{"line":12,"column":137}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":68}},"12":{"start":{"line":14,"column":8},"end":{"line":43,"column":9}},"13":{"start":{"line":15,"column":29},"end":{"line":20,"column":14}},"14":{"start":{"line":21,"column":12},"end":{"line":42,"column":13}},"15":{"start":{"line":22,"column":41},"end":{"line":22,"column":145}},"16":{"start":{"line":23,"column":41},"end":{"line":23,"column":85}},"17":{"start":{"line":24,"column":46},"end":{"line":24,"column":110}},"18":{"start":{"line":25,"column":33},"end":{"line":31,"column":17}},"19":{"start":{"line":32,"column":16},"end":{"line":39,"column":17}},"20":{"start":{"line":33,"column":31},"end":{"line":33,"column":115}},"21":{"start":{"line":34,"column":20},"end":{"line":34,"column":45}},"22":{"start":{"line":35,"column":20},"end":{"line":38,"column":23}},"23":{"start":{"line":40,"column":16},"end":{"line":40,"column":51}},"24":{"start":{"line":41,"column":16},"end":{"line":41,"column":57}},"25":{"start":{"line":44,"column":8},"end":{"line":44,"column":21}},"26":{"start":{"line":46,"column":4},"end":{"line":46,"column":22}},"27":{"start":{"line":48,"column":0},"end":{"line":48,"column":58}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":32},"end":{"line":9,"column":33}},"loc":{"start":{"line":9,"column":38},"end":{"line":47,"column":1}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":23},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":44},"end":{"line":45,"column":5}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":26},"end":{"line":13,"column":67}},"type":"cond-expr","locations":[{"start":{"line":13,"column":46},"end":{"line":13,"column":55}},{"start":{"line":13,"column":58},"end":{"line":13,"column":67}}],"line":13},"1":{"loc":{"start":{"line":14,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":43,"column":9}},{"start":{"line":14,"column":8},"end":{"line":43,"column":9}}],"line":14},"2":{"loc":{"start":{"line":16,"column":25},"end":{"line":16,"column":85}},"type":"cond-expr","locations":[{"start":{"line":16,"column":62},"end":{"line":16,"column":64}},{"start":{"line":16,"column":67},"end":{"line":16,"column":85}}],"line":16},"3":{"loc":{"start":{"line":21,"column":12},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":21,"column":12},"end":{"line":42,"column":13}},{"start":{"line":21,"column":12},"end":{"line":42,"column":13}}],"line":21},"4":{"loc":{"start":{"line":32,"column":16},"end":{"line":39,"column":17}},"type":"if","locations":[{"start":{"line":32,"column":16},"end":{"line":39,"column":17}},{"start":{"line":32,"column":16},"end":{"line":39,"column":17}}],"line":32}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":9,"27":9},"f":{"0":9,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"NewConversionMiddleware.js","sourceRoot":"","sources":["NewConversionMiddleware.ts"],"names":[],"mappings":";;AAEA,mCAAiD;AACjD,0DAAwD;AACxD,uEAA8E;AAC9E,8DAG0C;AAI1C,qDAA4D;AAC5D,+CAA8C;AAE9C,MAAM,uBAAuB,GAAG,GAAG,EAAE;IACnC,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,GACJ,EACH,UAAU,EAAE,EACR,QAAQ,EACV,SAAS,GACR,EACH,UAAU,GACT,GACF,GAAG,GAAG,CAAC;QACR,MAAM,MAAM,GAAG,MAAM,0CAAe,CAAC,6BAA6B,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAM,CAAC,IAAI,CAAC,CAAC;QAC/F,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE5D,IAAI,CAAC,cAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC3B,MAAM,QAAQ,GAAG,MAAM,4CAAiB,CAAC,IAAI,CAAC;gBAC5C,OAAO,EAAE,cAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAC5D,QAAQ;gBACR,SAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;gBAC7B,GAAG;aACJ,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,MAAM,gBAAgB,GAAG,eAAM,CAC7B,UAAU,CAAC,GAAG,CAAC,uBAAW,CAAC,yCAAyC,CAAC,CAAC,KAAK,CAC5E,CAAC;gBAEF,MAAM,gBAAgB,GAAG,iBAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBAC7D,MAAM,qBAAqB,GAAG,iBAAQ,CAAC,gBAAgB,CAAC,4BAA4B,CAAC,CAAC;gBAEtF,MAAM,QAAQ,GAAiB;oBAC7B,OAAO,EAAE,gBAAgB,CAAC;wBACxB,mBAAmB,EAAE,UAAU,CAAC,GAAG,CAAC,uBAAW,CAAC,mBAAmB,CAAC,CAAC,KAAK;wBAC1E,SAAS;qBACV,CAAC;oBACF,IAAI,EAAE,sBAAY,CAAC,IAAI;iBACxB,CAAC;gBAEF,IAAI,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,0CAA0C,CAAC,EAAE;oBAC5E,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,CACvB,mBAAa,CAAC,0CAA0C,CACzD,CAAC,KAAK,CAAC;oBACR,QAAQ,CAAC,OAAO,IAAI,IAAI,CAAC;oBACzB,QAAQ,CAAC,OAAO,IAAI,qBAAqB,CAAC;wBACxC,uBAAuB,EAAE,UAAU,CAAC,GAAG,CAAC,uBAAW,CAAC,uBAAuB,CAAC,CAAC,KAAK;wBAClF,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;qBACzB,CAAC,CAAC;iBACJ;gBAED,GAAG,CAAC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC;gBACnC,GAAG,CAAC,KAAK,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC;aAC1C;SACF;QAED,MAAM,IAAI,EAAE,CAAC;IACf,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAGA,0DAAuB","sourcesContent":["import { Middleware, Context } from 'koa';\nimport * as Boom from 'boom';\nimport { isNil, sample, template } from 'lodash';\nimport { Status } from 'lexica-dialog-model/dist/Issue';\nimport { issueRepository, messageRepository } from 'lexica-dialog-repository';\nimport {\n  ResponseType,\n  TextResponse,\n} from 'lexica-dialog-model/dist/Message';\nimport {\n  Config,\n} from 'lexica-dialog-model/dist/Config';\nimport { RunTimeConfig } from 'lexica-dialog-core/dist/Api';\nimport { CONFIG_KEYS } from '../../Constants';\n\nconst newConversionMiddleware = () => {\n  const middleware: Middleware = async (ctx, next) => {\n    const {\n      state: {\n        user: {\n          uni,\n        },\n      senderInfo: {\n          senderId,\n        firstName,\n        },\n      uniConfigs,\n      },\n    } = ctx;\n    const issues = await issueRepository.findByUniAndSenderIdAndStatus(uni, senderId, Status.OPEN);\n    ctx.state.issue = issues.length > 0 ? issues[0] : undefined;\n\n    if (!isNil(ctx.state.issue)) {\n      const messages = await messageRepository.find({\n        issueId: isNil(ctx.state.issue.id) ? '' : ctx.state.issue.id,\n        senderId,\n        sessionId: { $exists: false },\n        uni,\n      });\n\n      if (messages.length === 0) {\n        const messageTemplates = sample(\n          uniConfigs.get(CONFIG_KEYS.PREPEND_MESSAGES_PRIOR_TO_LIBRARIAN_REPLY).value,\n        );\n\n        const responseTemplate = template(messageTemplates.response);\n        const runTimeConfigTemplate = template(messageTemplates.additional_time_gap_response);\n\n        const response: TextResponse = {\n          message: responseTemplate({\n            LIBRARIAN_INDICATOR: uniConfigs.get(CONFIG_KEYS.LIBRARIAN_INDICATOR).value,\n            firstName,\n          }),\n          type: ResponseType.TEXT,\n        };\n\n        if (uniConfigs.has(RunTimeConfig.TIME_GAP_IN_MS_TRIGGER_CONFIRM_CLOSE_ISSUE)) {\n          const ms = uniConfigs.get(\n            RunTimeConfig.TIME_GAP_IN_MS_TRIGGER_CONFIRM_CLOSE_ISSUE,\n          ).value;\n          response.message += '\\n';\n          response.message += runTimeConfigTemplate({\n            RECREATE_ISSUE_KEY_WORD: uniConfigs.get(CONFIG_KEYS.RECREATE_ISSUE_KEY_WORD).value,\n            TIME_GAP: ms / 60 / 1000,\n          });\n        }\n\n        ctx.state.systemMessage = response;\n        ctx.state.systemMessageDate = new Date();\n      }\n    }\n\n    await next();\n  };\n  return middleware;\n};\n\nexport {\n  newConversionMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"67ca102f955ea225db3bd8375bcc7b4db4865db7"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/RequestResponseMapping.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/RequestResponseMapping.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":26}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":13},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":18},"end":{"line":7,"column":61}},"6":{"start":{"line":8,"column":35},"end":{"line":8,"column":70}},"7":{"start":{"line":9,"column":31},"end":{"line":9,"column":80}},"8":{"start":{"line":10,"column":19},"end":{"line":10,"column":40}},"9":{"start":{"line":11,"column":15},"end":{"line":13,"column":2}},"10":{"start":{"line":14,"column":15},"end":{"line":17,"column":2}},"11":{"start":{"line":18,"column":29},"end":{"line":18,"column":86}},"12":{"start":{"line":19,"column":23},"end":{"line":25,"column":1}},"13":{"start":{"line":20,"column":4},"end":{"line":24,"column":7}},"14":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"15":{"start":{"line":22,"column":12},"end":{"line":22,"column":63}},"16":{"start":{"line":26,"column":18},"end":{"line":32,"column":1}},"17":{"start":{"line":27,"column":4},"end":{"line":31,"column":6}},"18":{"start":{"line":33,"column":24},"end":{"line":35,"column":1}},"19":{"start":{"line":34,"column":4},"end":{"line":34,"column":54}},"20":{"start":{"line":36,"column":22},"end":{"line":57,"column":1}},"21":{"start":{"line":37,"column":21},"end":{"line":37,"column":26}},"22":{"start":{"line":38,"column":19},"end":{"line":38,"column":21}},"23":{"start":{"line":39,"column":4},"end":{"line":45,"column":5}},"24":{"start":{"line":40,"column":8},"end":{"line":40,"column":25}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":26}},"26":{"start":{"line":44,"column":8},"end":{"line":44,"column":27}},"27":{"start":{"line":46,"column":23},"end":{"line":48,"column":42}},"28":{"start":{"line":48,"column":26},"end":{"line":48,"column":37}},"29":{"start":{"line":49,"column":21},"end":{"line":49,"column":120}},"30":{"start":{"line":49,"column":115},"end":{"line":49,"column":119}},"31":{"start":{"line":50,"column":27},"end":{"line":50,"column":69}},"32":{"start":{"line":50,"column":35},"end":{"line":50,"column":69}},"33":{"start":{"line":51,"column":20},"end":{"line":52,"column":157}},"34":{"start":{"line":52,"column":19},"end":{"line":52,"column":155}},"35":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"36":{"start":{"line":54,"column":8},"end":{"line":54,"column":23}},"37":{"start":{"line":56,"column":4},"end":{"line":56,"column":22}},"38":{"start":{"line":58,"column":17},"end":{"line":65,"column":1}},"39":{"start":{"line":59,"column":68},"end":{"line":59,"column":71}},"40":{"start":{"line":60,"column":20},"end":{"line":60,"column":105}},"41":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"42":{"start":{"line":62,"column":8},"end":{"line":62,"column":23}},"43":{"start":{"line":64,"column":4},"end":{"line":64,"column":26}},"44":{"start":{"line":66,"column":0},"end":{"line":71,"column":3}},"45":{"start":{"line":67,"column":54},"end":{"line":67,"column":57}},"46":{"start":{"line":68,"column":4},"end":{"line":69,"column":37}},"47":{"start":{"line":70,"column":4},"end":{"line":70,"column":63}},"48":{"start":{"line":72,"column":0},"end":{"line":75,"column":3}},"49":{"start":{"line":73,"column":20},"end":{"line":73,"column":39}},"50":{"start":{"line":74,"column":4},"end":{"line":74,"column":44}},"51":{"start":{"line":76,"column":0},"end":{"line":92,"column":3}},"52":{"start":{"line":77,"column":68},"end":{"line":77,"column":71}},"53":{"start":{"line":78,"column":23},"end":{"line":78,"column":36}},"54":{"start":{"line":79,"column":24},"end":{"line":79,"column":38}},"55":{"start":{"line":80,"column":16},"end":{"line":80,"column":46}},"56":{"start":{"line":81,"column":21},"end":{"line":81,"column":113}},"57":{"start":{"line":81,"column":108},"end":{"line":81,"column":112}},"58":{"start":{"line":82,"column":4},"end":{"line":82,"column":72}},"59":{"start":{"line":83,"column":4},"end":{"line":83,"column":74}},"60":{"start":{"line":84,"column":4},"end":{"line":90,"column":7}},"61":{"start":{"line":91,"column":4},"end":{"line":91,"column":47}},"62":{"start":{"line":93,"column":0},"end":{"line":97,"column":3}},"63":{"start":{"line":94,"column":20},"end":{"line":94,"column":39}},"64":{"start":{"line":95,"column":4},"end":{"line":95,"column":86}},"65":{"start":{"line":96,"column":4},"end":{"line":96,"column":20}},"66":{"start":{"line":98,"column":0},"end":{"line":98,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":23},"end":{"line":19,"column":24}},"loc":{"start":{"line":19,"column":48},"end":{"line":25,"column":1}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":16},"end":{"line":20,"column":17}},"loc":{"start":{"line":20,"column":24},"end":{"line":24,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":18},"end":{"line":26,"column":19}},"loc":{"start":{"line":26,"column":31},"end":{"line":32,"column":1}},"line":26},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":24},"end":{"line":33,"column":25}},"loc":{"start":{"line":33,"column":37},"end":{"line":35,"column":1}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":22},"end":{"line":36,"column":23}},"loc":{"start":{"line":36,"column":39},"end":{"line":57,"column":1}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":48,"column":16},"end":{"line":48,"column":17}},"loc":{"start":{"line":48,"column":26},"end":{"line":48,"column":37}},"line":48},"6":{"name":"(anonymous_6)","decl":{"start":{"line":49,"column":110},"end":{"line":49,"column":111}},"loc":{"start":{"line":49,"column":115},"end":{"line":49,"column":119}},"line":49},"7":{"name":"(anonymous_7)","decl":{"start":{"line":50,"column":27},"end":{"line":50,"column":28}},"loc":{"start":{"line":50,"column":35},"end":{"line":50,"column":69}},"line":50},"8":{"name":"(anonymous_8)","decl":{"start":{"line":52,"column":13},"end":{"line":52,"column":14}},"loc":{"start":{"line":52,"column":19},"end":{"line":52,"column":155}},"line":52},"9":{"name":"(anonymous_9)","decl":{"start":{"line":58,"column":17},"end":{"line":58,"column":18}},"loc":{"start":{"line":58,"column":32},"end":{"line":65,"column":1}},"line":58},"10":{"name":"(anonymous_10)","decl":{"start":{"line":66,"column":16},"end":{"line":66,"column":17}},"loc":{"start":{"line":66,"column":31},"end":{"line":71,"column":1}},"line":66},"11":{"name":"(anonymous_11)","decl":{"start":{"line":72,"column":26},"end":{"line":72,"column":27}},"loc":{"start":{"line":72,"column":41},"end":{"line":75,"column":1}},"line":72},"12":{"name":"(anonymous_12)","decl":{"start":{"line":76,"column":39},"end":{"line":76,"column":40}},"loc":{"start":{"line":76,"column":54},"end":{"line":92,"column":1}},"line":76},"13":{"name":"(anonymous_13)","decl":{"start":{"line":81,"column":103},"end":{"line":81,"column":104}},"loc":{"start":{"line":81,"column":108},"end":{"line":81,"column":112}},"line":81},"14":{"name":"(anonymous_14)","decl":{"start":{"line":93,"column":29},"end":{"line":93,"column":30}},"loc":{"start":{"line":93,"column":44},"end":{"line":97,"column":1}},"line":93}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"1":{"loc":{"start":{"line":21,"column":12},"end":{"line":21,"column":108}},"type":"binary-expr","locations":[{"start":{"line":21,"column":12},"end":{"line":21,"column":39}},{"start":{"line":21,"column":44},"end":{"line":21,"column":75}},{"start":{"line":21,"column":79},"end":{"line":21,"column":107}}],"line":21},"2":{"loc":{"start":{"line":39,"column":4},"end":{"line":45,"column":5}},"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":45,"column":5}},{"start":{"line":39,"column":4},"end":{"line":45,"column":5}}],"line":39},"3":{"loc":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},{"start":{"line":53,"column":4},"end":{"line":55,"column":5}}],"line":53},"4":{"loc":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},{"start":{"line":61,"column":4},"end":{"line":63,"column":5}}],"line":61},"5":{"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":55}},"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},{"start":{"line":61,"column":36},"end":{"line":61,"column":55}}],"line":61}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":0,"14":0,"15":0,"16":9,"17":0,"18":9,"19":0,"20":9,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":9,"39":0,"40":0,"41":0,"42":0,"43":0,"44":9,"45":0,"46":0,"47":0,"48":9,"49":0,"50":0,"51":9,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":9,"63":0,"64":0,"65":0,"66":9},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"file":"RequestResponseMapping.js","sourceRoot":"","sources":["RequestResponseMapping.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context } from 'koa';\nimport * as Router from 'koa-router';\nimport * as Joi from 'joi';\nimport { isNil, keyBy, has, omit, Dictionary } from 'lodash';\nimport * as Boom from 'boom';\nimport {\n  Message,\n  MessageType,\n} from 'lexica-dialog-model/dist/Message';\nimport {\n  requestResponseMappingRepository,\n  messageRepository,\n  MessageModel,\n  RequestResponseMappingModel,\n} from 'lexica-dialog-repository';\nimport {\n  createValidationMiddleware,\n} from '../../middlewares/ValidationMiddleware';\nimport {\n  transform as messageTransform,\n} from './Messages';\n\nconst router = new Router({\n  prefix: '/request-response-mappings',\n});\n\nconst schema = Joi.object().keys({\n  requests: Joi.array().min(1).required(),\n  responses: Joi.array().min(1).required(),\n});\n\nconst validationMiddleware = createValidationMiddleware(schema);\n\nconst validateExists = (messages: Dictionary<MessageModel>, ids: string[], type: MessageType) => {\n  ids.forEach((id: string) => {\n    if (!has(messages, id) || (!isNil(messages['id']) && messages['id'].type !== type)) {\n      throw Boom.badData(`${type} not found. ID: ${id}`);\n    }\n  });\n};\n\nconst transform = (element: RequestResponseMappingModel) => {\n  return {\n    id: element.id,\n    requests: element.requests,\n    responses: element.responses,\n  };\n};\n\nconst fetchMessageIds = (element: RequestResponseMappingModel) => {\n  return element.requests.concat(element.responses);\n};\n\nconst fetchMessages =\n  async (model: RequestResponseMappingModel | RequestResponseMappingModel[]) => {\n    let arrayModel = false;\n    let elements: RequestResponseMappingModel[] = [];\n\n    if (Array.isArray(model)) {\n      elements = model;\n      arrayModel = true;\n    } else {\n      elements = [model];\n    }\n\n    const messageIds = elements\n      .map(fetchMessageIds)\n      .reduce((a, b) => a.concat(b), []);\n    const messages = keyBy(await messageRepository.findByIds(messageIds), m => m.id) as Dictionary<MessageModel>;\n    const messageMapping = (id: string) => messageTransform(messages[id]);\n    const results = elements\n      .map(e => ({\n        ...transform(e),\n        requestMessages : e.requests.map(messageMapping),\n        responsesMessages : e.responses.map(messageMapping),\n      }));\n    if (arrayModel) {\n      return results;\n    }\n\n    return results[0];\n  };\n\nconst findById = async (ctx: Context) => {\n  const {\n    state: {\n      user: {\n        uni,\n      },\n    },\n    params: {\n      mappingId,\n    },\n  } = ctx;\n  const mapping = await requestResponseMappingRepository.findById(mappingId);\n  if (!isNil(mapping) && mapping.uni === uni) {\n    return mapping;\n  }\n  throw Boom.notFound();\n};\n\nrouter.get('/', async (ctx) => {\n  const {\n    state: {\n      user: {\n        uni,\n      },\n      pageable,\n    },\n  } = ctx;\n  ctx.body = await requestResponseMappingRepository\n    .findPage(pageable, { uni });\n  ctx.body.elements = await fetchMessages(ctx.body.elements);\n});\n\nrouter.get('/:mappingId', async (ctx) => {\n  const mapping = await findById(ctx);\n  ctx.body = await fetchMessages(mapping);\n});\n\nrouter.post('/', validationMiddleware, async (ctx) => {\n  const {\n    state: {\n      user: {\n        id,\n        uni,\n      },\n    },\n    request: {\n      body,\n    },\n  } = ctx;\n  const requestIds = body.requests;\n  const responseIds = body.responses;\n  const ids = requestIds.concat(responseIds);\n  const messages = keyBy(await messageRepository.findByIds(ids), m => m.id) as Dictionary<MessageModel>;\n\n  validateExists(messages, requestIds, MessageType.REQUEST);\n  validateExists(messages, responseIds, MessageType.RESPONSE);\n\n  ctx.body = await requestResponseMappingRepository.create({\n    createdBy: id,\n    requests: requestIds,\n    responses: responseIds,\n    uni,\n    updatedBy: id,\n  });\n  ctx.body = (await fetchMessages(ctx.body));\n});\n\nrouter.delete('/:mappingId', async (ctx) => {\n  const mapping = await findById(ctx);\n  await requestResponseMappingRepository.remove(mapping);\n  ctx.body = true;\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"9afec3c38ad5e8eb08e5f46c0fa21c7405432330"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/SenderInfoMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/SenderInfoMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":13},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":35},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":29},"end":{"line":26,"column":1}},"5":{"start":{"line":7,"column":23},"end":{"line":24,"column":5}},"6":{"start":{"line":8,"column":33},"end":{"line":8,"column":43}},"7":{"start":{"line":9,"column":24},"end":{"line":9,"column":38}},"8":{"start":{"line":10,"column":27},"end":{"line":10,"column":103}},"9":{"start":{"line":11,"column":8},"end":{"line":23,"column":9}},"10":{"start":{"line":12,"column":12},"end":{"line":18,"column":13}},"11":{"start":{"line":13,"column":37},"end":{"line":13,"column":46}},"12":{"start":{"line":14,"column":16},"end":{"line":14,"column":86}},"13":{"start":{"line":17,"column":16},"end":{"line":17,"column":40}},"14":{"start":{"line":21,"column":12},"end":{"line":21,"column":46}},"15":{"start":{"line":22,"column":12},"end":{"line":22,"column":25}},"16":{"start":{"line":25,"column":4},"end":{"line":25,"column":22}},"17":{"start":{"line":27,"column":0},"end":{"line":27,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":29},"end":{"line":6,"column":30}},"loc":{"start":{"line":6,"column":74},"end":{"line":26,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":23},"end":{"line":7,"column":24}},"loc":{"start":{"line":7,"column":44},"end":{"line":24,"column":5}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":30},"end":{"line":6,"column":69}},"type":"default-arg","locations":[{"start":{"line":6,"column":67},"end":{"line":6,"column":69}}],"line":6},"1":{"loc":{"start":{"line":6,"column":32},"end":{"line":6,"column":62}},"type":"default-arg","locations":[{"start":{"line":6,"column":58},"end":{"line":6,"column":62}}],"line":6},"2":{"loc":{"start":{"line":11,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":23,"column":9}},{"start":{"line":11,"column":8},"end":{"line":23,"column":9}}],"line":11},"3":{"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":97}},"type":"binary-expr","locations":[{"start":{"line":11,"column":12},"end":{"line":11,"column":38}},{"start":{"line":11,"column":43},"end":{"line":11,"column":70}},{"start":{"line":11,"column":74},"end":{"line":11,"column":96}}],"line":11},"4":{"loc":{"start":{"line":12,"column":12},"end":{"line":18,"column":13}},"type":"if","locations":[{"start":{"line":12,"column":12},"end":{"line":18,"column":13}},{"start":{"line":12,"column":12},"end":{"line":18,"column":13}}],"line":12}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":63,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":63,"17":9},"f":{"0":63,"1":0},"b":{"0":[18],"1":[18],"2":[0,0],"3":[0,0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"SenderInfoMiddleware.js","sourceRoot":"","sources":["SenderInfoMiddleware.ts"],"names":[],"mappings":";;AACA,6BAA6B;AAC7B,mCAA+B;AAE/B,uEAA4E;AAE5E,MAAM,oBAAoB,GAAG,CAAC,EAAE,uBAAuB,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE;IACvE,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACpC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;QAC/B,MAAM,UAAU,GAAG,MAAM,+CAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACrE,IAAI,cAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,cAAK,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE;YACvE,IAAI,uBAAuB,EAAE;gBAC3B,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;gBAC/B,GAAG,CAAC,IAAI,GAAG,IAAI,qCAAU,CAAC,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;aAC5C;iBAAM;gBACL,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;aACzB;SACF;aAAM;YACL,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;YAClC,MAAM,IAAI,EAAE,CAAC;SACd;IACH,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAGA,oDAAoB","sourcesContent":["import { Middleware, Context } from 'koa';\nimport * as Boom from 'boom';\nimport { isNil } from 'lodash';\nimport { SenderInfo } from 'lexica-dialog-model/dist/SenderInfo';\nimport { senderInfoRepository, PageResult } from 'lexica-dialog-repository';\n\nconst senderInfoMiddleware = ({ notFoundReturnEmptyPage = true } = {}) => {\n  const middleware: Middleware = async (ctx, next) => {\n    const { senderInfoId } = ctx.params;\n    const { uni } = ctx.state.user;\n    const senderInfo = await senderInfoRepository.findById(senderInfoId);\n    if (isNil(senderInfo) || (!isNil(senderInfo) && senderInfo.uni !== uni)) {\n      if (notFoundReturnEmptyPage) {\n        const { pageable } = ctx.state;\n        ctx.body = new PageResult([], 0, pageable);\n      } else {\n        throw Boom.badRequest();\n      }\n    } else {\n      ctx.state.senderInfo = senderInfo;\n      await next();\n    }\n  };\n  return middleware;\n};\n\nexport {\n  senderInfoMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"6d96c69dac1d383a8083ac8668fdead76c12ccc2"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Suggestions.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/Suggestions.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":45}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":27}},"5":{"start":{"line":7,"column":0},"end":{"line":26,"column":3}},"6":{"start":{"line":8,"column":86},"end":{"line":8,"column":89}},"7":{"start":{"line":9,"column":4},"end":{"line":25,"column":5}},"8":{"start":{"line":10,"column":42},"end":{"line":17,"column":10}},"9":{"start":{"line":18,"column":8},"end":{"line":21,"column":12}},"10":{"start":{"line":18,"column":59},"end":{"line":21,"column":9}},"11":{"start":{"line":24,"column":8},"end":{"line":24,"column":22}},"12":{"start":{"line":27,"column":0},"end":{"line":27,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":28},"end":{"line":7,"column":29}},"loc":{"start":{"line":7,"column":43},"end":{"line":26,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":49},"end":{"line":18,"column":50}},"loc":{"start":{"line":18,"column":59},"end":{"line":21,"column":9}},"line":18}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":4},"end":{"line":25,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":25,"column":5}},{"start":{"line":9,"column":4},"end":{"line":25,"column":5}}],"line":9}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":9},"f":{"0":0,"1":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"Suggestions.js","sourceRoot":"","sources":["Suggestions.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,8CAA8C;AAC9C,+CAA8C;AAE9C,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAE5B,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IACxC,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,GACJ,EACH,UAAU,GACT,EACD,OAAO,EAAE,EACP,IAAI,EAAE,EACJ,GAAG,GACJ,GACF,GACF,GAAG,GAAG,CAAC;IAGR,IAAG,uBAAW,CAAC,qBAAqB,EAAC;QACnC,MAAM,yBAAyB,GAAG,MAAM,GAAG,CAAC;YAC1C,IAAI,EAAE;gBACJ,GAAG;gBACH,GAAG;aACJ;YACD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,uBAAW,CAAC,qBAAqB;SACvC,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,GAAG,yBAAyB,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;YACtD,MAAM,EAAE,GAAG,CAAC,YAAY;YACxB,QAAQ,EAAE,GAAG,CAAC,GAAG;SAClB,CAAC,CAAC,CAAC;KACL;SAAM;QACL,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;KACf;AAEH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport * as req from 'request-promise-native';\nimport { ENV_CONFIGS } from '../../Constants';\n\nconst router = new Router();\n\nrouter.post('/suggestions', async (ctx) => {\n  const {\n    state: {\n      user: {\n        uni,\n      },\n    uniConfigs,\n    },\n    request: {\n      body: {\n        msg,\n      },\n    },\n  } = ctx;\n\n  // No suggestion if NLP server for suggestion is not set.\n  if(ENV_CONFIGS.SUGGESTION_SERVER_URL){\n    const suggestionsServerResponse = await req({\n      json: {\n        msg,\n        uni,\n      },\n      method: 'POST',\n      url: ENV_CONFIGS.SUGGESTION_SERVER_URL,\n    });\n    ctx.body = suggestionsServerResponse.map((obj: any) => ({\n      answer: obj.lib_response,\n      question: obj.msg,\n    }));\n  } else {\n    ctx.body = [];\n  }\n  \n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"da4a0e1c375e78136ebd225b160ac3babc05a233"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/UniConfigsMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/UniConfigsMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":35},"end":{"line":4,"column":70}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":20},"end":{"line":8,"column":1}},"5":{"start":{"line":7,"column":4},"end":{"line":7,"column":93}},"6":{"start":{"line":7,"column":43},"end":{"line":7,"column":70}},"7":{"start":{"line":9,"column":29},"end":{"line":17,"column":1}},"8":{"start":{"line":10,"column":23},"end":{"line":15,"column":5}},"9":{"start":{"line":11,"column":48},"end":{"line":11,"column":51}},"10":{"start":{"line":12,"column":30},"end":{"line":12,"column":126}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":130}},"12":{"start":{"line":14,"column":8},"end":{"line":14,"column":21}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":22}},"14":{"start":{"line":18,"column":0},"end":{"line":18,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":20},"end":{"line":6,"column":21}},"loc":{"start":{"line":6,"column":33},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":26},"end":{"line":7,"column":27}},"loc":{"start":{"line":7,"column":43},"end":{"line":7,"column":70}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":29},"end":{"line":9,"column":30}},"loc":{"start":{"line":9,"column":35},"end":{"line":17,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":10,"column":23},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":44},"end":{"line":15,"column":5}},"line":10}},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":0,"6":0,"7":9,"8":9,"9":0,"10":0,"11":0,"12":0,"13":9,"14":9},"f":{"0":0,"1":0,"2":9,"3":0},"b":{},"inputSourceMap":{"version":3,"file":"UniConfigsMiddleware.js","sourceRoot":"","sources":["UniConfigsMiddleware.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AAKtC,uEAEkC;AAClC,+CAA6C;AAG7C,MAAM,WAAW,GAAG,CAAC,OAAiB,EAAE,EAAE;IACxC,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,eAAG,CAAiB,EAAE,CAAC,CAAC,CAAC;AAC/F,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,GAAG,EAAE;IAChC,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,MAAM,EACJ,KAAK,EAAE,EACL,IAAI,EAAE,EACJ,GAAG,GACJ,GACF,GACF,GAAG,GAAG,CAAC;QACR,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,2CAAgB,CAAC,SAAS,CAAC,sBAAU,CAAC,CAAC,CAAC;QAChF,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,2CAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/F,MAAM,IAAI,EAAE,CAAC;IACf,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAGA,oDAAoB","sourcesContent":["import { List, Map } from 'immutable';\nimport { Middleware, Context } from 'koa';\nimport {\n  Config,\n} from 'lexica-dialog-model/dist/Config';\nimport {\n  configRepository,\n} from 'lexica-dialog-repository';\nimport { GLOBAL_UNI } from '../../Constants';\n\n\nconst toConfigMap = (configs: Config[]) => {\n  return configs.reduce((map, config) => map.set(config.key, config), Map<string, Config>({}));\n};\n\nconst uniConfigsMiddleware = () => {\n  const middleware: Middleware = async (ctx, next) => {\n    const {\n      state: {\n        user: {\n          uni,\n        },\n      },\n    } = ctx;\n    const globalConfigs = toConfigMap(await configRepository.findByUni(GLOBAL_UNI));\n    ctx.state.uniConfigs = globalConfigs.merge(toConfigMap(await configRepository.findByUni(uni)));\n    await next();\n  };\n  return middleware;\n};\n\nexport {\n  uniConfigsMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"73cf2af4c60e4e9a3152b7583411fcfe094f2369"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":24},"end":{"line":4,"column":50}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":19},"end":{"line":6,"column":40}},"5":{"start":{"line":7,"column":21},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":22},"end":{"line":8,"column":46}},"7":{"start":{"line":9,"column":25},"end":{"line":9,"column":52}},"8":{"start":{"line":10,"column":33},"end":{"line":10,"column":68}},"9":{"start":{"line":11,"column":23},"end":{"line":11,"column":48}},"10":{"start":{"line":12,"column":15},"end":{"line":14,"column":2}},"11":{"start":{"line":15,"column":0},"end":{"line":15,"column":42}},"12":{"start":{"line":16,"column":0},"end":{"line":16,"column":40}},"13":{"start":{"line":17,"column":0},"end":{"line":17,"column":38}},"14":{"start":{"line":18,"column":0},"end":{"line":18,"column":46}},"15":{"start":{"line":19,"column":0},"end":{"line":19,"column":54}},"16":{"start":{"line":20,"column":0},"end":{"line":20,"column":44}},"17":{"start":{"line":21,"column":0},"end":{"line":21,"column":45}},"18":{"start":{"line":22,"column":0},"end":{"line":22,"column":43}},"19":{"start":{"line":23,"column":0},"end":{"line":23,"column":25}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":9,"14":9,"15":9,"16":9,"17":9,"18":9,"19":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,mDAA2D;AAC3D,qCAA6C;AAC7C,yCAAiD;AACjD,6CAAqD;AACrD,+CAAuD;AACvD,qDAAyD;AACzD,qEAA6E;AAC7E,iDAAyD;AAEzD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,gBAAgB;CACzB,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,oBAAU,CAAC,MAAM,EAAE,CAAC,CAAC;AAChC,MAAM,CAAC,GAAG,CAAC,kBAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AAC9B,MAAM,CAAC,GAAG,CAAC,gBAAM,CAAC,MAAM,EAAE,CAAC,CAAC;AAE5B,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,MAAM,EAAE,CAAC,CAAC;AAChC,MAAM,CAAC,GAAG,CAAC,gCAAsB,CAAC,MAAM,EAAE,CAAC,CAAC;AAC5C,MAAM,CAAC,GAAG,CAAC,sBAAY,CAAC,MAAM,EAAE,CAAC,CAAC;AAClC,MAAM,CAAC,GAAG,CAAC,uBAAa,CAAC,MAAM,EAAE,CAAC,CAAC;AACnC,MAAM,CAAC,GAAG,CAAC,qBAAW,CAAC,MAAM,EAAE,CAAC,CAAC;AAEjC,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { default as conversations } from './Conversations';\nimport { default as issues } from './Issues';\nimport { default as messages } from './Messages';\nimport { default as activities } from './Activities';\nimport { default as suggestions } from './Suggestions';\nimport { default as downloader } from './FileDownloader';\nimport { default as requestResponseMapping } from './RequestResponseMapping';\nimport { default as emailForward } from './EmailForward';\n\nconst router = new Router({\n  prefix: '/conversations',\n});\n\nrouter.use(activities.routes());\nrouter.use(messages.routes());\nrouter.use(issues.routes());\n// child routes should be declared before parent?\nrouter.use(downloader.routes());\nrouter.use(requestResponseMapping.routes());\nrouter.use(emailForward.routes());\nrouter.use(conversations.routes());\nrouter.use(suggestions.routes());\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"f50d67be098c98c7d850afdc1cab1b5a44d8fcaa"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/models/ConversationActivity.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/models/ConversationActivity.ts","statementMap":{"0":{"start":{"line":1,"column":13},"end":{"line":1,"column":42}},"1":{"start":{"line":1,"column":42},"end":{"line":1,"column":55}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":0,"1":0,"2":0},"f":{},"b":{}}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/repositories/ConversationActivityRepository.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/conversations/repositories/ConversationActivityRepository.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":19},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":15},"end":{"line":22,"column":2}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":63}},"5":{"start":{"line":26,"column":8},"end":{"line":26,"column":90}},"6":{"start":{"line":29,"column":8},"end":{"line":29,"column":60}},"7":{"start":{"line":32,"column":0},"end":{"line":32,"column":72}},"8":{"start":{"line":33,"column":39},"end":{"line":33,"column":96}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":72}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":28},"end":{"line":27,"column":5}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":63},"end":{"line":30,"column":5}},"line":28}},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":0,"7":9,"8":9,"9":9},"f":{"0":9,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"ConversationActivityRepository.js","sourceRoot":"","sources":["ConversationActivityRepository.ts"],"names":[],"mappings":";;AAAA,uCAAoE;AAEpE,iFAA0E;AAE1E,MAAM,MAAM,GAAG,IAAI,iBAAM,CAAC;IACxB,IAAI,EAAE;QACJ,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,IAAI;KACX;IACD,YAAY,EAAE;QACZ,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,MAAM;KACb;IACD,oBAAoB,EAAE;QACpB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,MAAM;KACb;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,MAAM;KACb;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AAI/D,MAAM,8BACJ,SAAQ,wBAA+D;IAEvE,YAAY,UAAsB;QAChC,KAAK,CAAC,UAAU,CAAC,KAAK,CACpB,sBAAsB,EACtB,MAAM,EACN,wBAAwB,CACzB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,8BAA8B,CAAC,MAAc,EAAE,YAAoB;QAC9E,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;IACtD,CAAC;CAEF;AAMC,wEAA8B;AAJhC,MAAM,8BAA8B,GAAG,IAAI,8BAA8B,CAAC,qBAAU,CAAC,CAAC;AAKpF,wEAA8B","sourcesContent":["import { Connection, connection, Document, Schema } from 'mongoose';\nimport { ConversationActivity } from '../models/ConversationActivity';\nimport CRUDRepository from 'lexica-dialog-repository/dist/CRUDRepository';\n\nconst schema = new Schema({\n  seen: {\n    required: true,\n    type: Date,\n  },\n  senderInfoId: {\n    required: true,\n    type: String,\n  },\n  suggestedAnswerClick: {\n    required: false,\n    type: Number,\n  },\n  userId: {\n    required: true,\n    type: String,\n  },\n});\n\nschema.index({ userId: 1, senderInfoId: 1 }, { unique: true });\n\ninterface ConversationActivityModel extends ConversationActivity, Document { }\n\nclass ConversationActivityRepository\n  extends CRUDRepository<ConversationActivity, ConversationActivityModel> {\n\n  constructor(connection: Connection) {\n    super(connection.model<ConversationActivityModel>(\n      'ConversationActivity',\n      schema,\n      'ConversationActivities',\n    ));\n  }\n\n  public async findOneByUserIdAndSenderInfoId(userId: string, senderInfoId: string) {\n    return this.model.findOne({ userId, senderInfoId });\n  }\n\n}\n\nconst conversationActivityRepository = new ConversationActivityRepository(connection);\n\nexport {\n  ConversationActivityModel,\n  ConversationActivityRepository,\n  conversationActivityRepository,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"9f153b8e189976d0b9f7e49b5426416ec111c86a"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/data-analytics/MessageComments.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/data-analytics/MessageComments.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":26}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":35},"end":{"line":6,"column":70}},"5":{"start":{"line":7,"column":31},"end":{"line":7,"column":80}},"6":{"start":{"line":9,"column":0},"end":{"line":14,"column":26}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":27}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":25}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":27}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":29}},"11":{"start":{"line":15,"column":15},"end":{"line":19,"column":2}},"12":{"start":{"line":20,"column":29},"end":{"line":20,"column":112}},"13":{"start":{"line":20,"column":98},"end":{"line":20,"column":111}},"14":{"start":{"line":21,"column":15},"end":{"line":21,"column":27}},"15":{"start":{"line":23,"column":20},"end":{"line":56,"column":5}},"16":{"start":{"line":57,"column":4},"end":{"line":72,"column":5}},"17":{"start":{"line":58,"column":8},"end":{"line":58,"column":37}},"18":{"start":{"line":59,"column":8},"end":{"line":59,"column":43}},"19":{"start":{"line":60,"column":8},"end":{"line":60,"column":37}},"20":{"start":{"line":62,"column":9},"end":{"line":72,"column":5}},"21":{"start":{"line":63,"column":8},"end":{"line":63,"column":43}},"22":{"start":{"line":64,"column":8},"end":{"line":64,"column":37}},"23":{"start":{"line":66,"column":9},"end":{"line":72,"column":5}},"24":{"start":{"line":67,"column":8},"end":{"line":67,"column":37}},"25":{"start":{"line":68,"column":8},"end":{"line":68,"column":37}},"26":{"start":{"line":70,"column":9},"end":{"line":72,"column":5}},"27":{"start":{"line":71,"column":8},"end":{"line":71,"column":37}},"28":{"start":{"line":73,"column":4},"end":{"line":73,"column":19}},"29":{"start":{"line":75,"column":0},"end":{"line":136,"column":3}},"30":{"start":{"line":76,"column":21},"end":{"line":76,"column":36}},"31":{"start":{"line":77,"column":20},"end":{"line":77,"column":38}},"32":{"start":{"line":78,"column":25},"end":{"line":134,"column":5}},"33":{"start":{"line":135,"column":4},"end":{"line":135,"column":94}},"34":{"start":{"line":137,"column":0},"end":{"line":137,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":1},"end":{"line":9,"column":2}},"loc":{"start":{"line":9,"column":18},"end":{"line":14,"column":1}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":87},"end":{"line":20,"column":88}},"loc":{"start":{"line":20,"column":98},"end":{"line":20,"column":111}},"line":20},"2":{"name":"projectAggregation","decl":{"start":{"line":22,"column":9},"end":{"line":22,"column":27}},"loc":{"start":{"line":22,"column":35},"end":{"line":74,"column":1}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":75,"column":54},"end":{"line":75,"column":55}},"loc":{"start":{"line":75,"column":73},"end":{"line":136,"column":1}},"line":75}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":3},"end":{"line":14,"column":24}},"type":"binary-expr","locations":[{"start":{"line":14,"column":3},"end":{"line":14,"column":8}},{"start":{"line":14,"column":13},"end":{"line":14,"column":23}}],"line":14},"1":{"loc":{"start":{"line":57,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":72,"column":5}},{"start":{"line":57,"column":4},"end":{"line":72,"column":5}}],"line":57},"2":{"loc":{"start":{"line":62,"column":9},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":62,"column":9},"end":{"line":72,"column":5}},{"start":{"line":62,"column":9},"end":{"line":72,"column":5}}],"line":62},"3":{"loc":{"start":{"line":66,"column":9},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":9},"end":{"line":72,"column":5}},{"start":{"line":66,"column":9},"end":{"line":72,"column":5}}],"line":66},"4":{"loc":{"start":{"line":70,"column":9},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":9},"end":{"line":72,"column":5}},{"start":{"line":70,"column":9},"end":{"line":72,"column":5}}],"line":70}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":0,"14":9,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":9,"30":0,"31":0,"32":0,"33":0,"34":9},"f":{"0":9,"1":0,"2":0,"3":0},"b":{"0":[9,9],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"MessageComments.js","sourceRoot":"","sources":["MessageComments.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Router from 'koa-router';\nimport * as Joi from 'joi';\nimport * as moment from 'moment';\nimport { messageRepository } from 'lexica-dialog-repository';\nimport { createValidationMiddleware } from '../../middlewares/ValidationMiddleware';\n\nenum Group {\n  HOUR = 'HOUR',\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n}\n\nconst schema = Joi.object().keys({\n  end: Joi.string().isoDate().required(),\n  group: Joi.string().allow(\n    Group.HOUR,\n    Group.DAY,\n    Group.WEEK,\n    Group.MONTH,\n  ).only().default(Group.DAY),\n  start: Joi.string().isoDate().required(),\n});\n\nconst validationMiddleware = createValidationMiddleware(schema, context => context.query);\nconst router = new Router();\n\nfunction projectAggregation(group: Group) {\n\n  const project = {\n    $project: {\n      dayOfMonth: {\n        $dayOfMonth: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      hour: {\n        $hour: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      month: {\n        $month: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      week: {\n        $week: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      year: {\n        $year: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n    },\n  };\n\n  if (group === Group.MONTH) {\n    delete project.$project.week;\n    delete project.$project.dayOfMonth;\n    delete project.$project.hour;\n  } else if (group === Group.WEEK) {\n    delete project.$project.dayOfMonth;\n    delete project.$project.hour;\n  } else if (group === Group.DAY) {\n    delete project.$project.week;\n    delete project.$project.hour;\n  } else if (group === Group.HOUR) {\n    delete project.$project.week;\n  }\n\n  return project;\n\n}\n\nrouter.get('/message-comments', validationMiddleware, async (context) => {\n  const { body } = context.request;\n  const { uni } = context.state.user;\n  const aggregations = [\n    {\n      $match: {\n        date: {\n          $gte: moment.utc(body.start).startOf('day').toDate(),\n          $lte: moment.utc(body.end).endOf('day').toDate(),\n        },\n        uni,\n      },\n    },\n    {\n      $project: {\n        ...projectAggregation(body.group).$project,\n        newType: '$comment.newType',\n        rating: '$comment.rating',\n      },\n    },\n    {\n      $match: {\n        $or: [\n          {\n            rating: {\n              $exists: true,\n            },\n          },\n          {\n            newType: {\n              $exists: true,\n            },\n          },\n        ],\n      },\n    },\n    {\n      $group: {\n        _id: {\n          dayOfMonth: '$dayOfMonth',\n          hour: '$hour',\n          month: '$month',\n          newType: '$newType',\n          rating: '$rating',\n          week: '$week',\n          year: '$year',\n        },\n        count: {\n          $sum: 1,\n        },\n      },\n    },\n    {\n      $sort: {\n        '_id.dayOfMonth': 1,\n        '_id.hour': 1,\n        '_id.month': 1,\n        '_id.newType': 1,\n        '_id.rating': 1,\n        '_id.week': 1,\n        '_id.year': 1,\n      },\n    },\n  ];\n  context.body = await messageRepository.aggregate(aggregations);\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"9d24cfa2161829ea11e594652a606d8dd61922ae"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/data-analytics/Traffic.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/data-analytics/Traffic.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":26}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":35},"end":{"line":6,"column":70}},"5":{"start":{"line":7,"column":31},"end":{"line":7,"column":80}},"6":{"start":{"line":9,"column":0},"end":{"line":13,"column":24}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":28}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":38}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":34}},"10":{"start":{"line":15,"column":0},"end":{"line":20,"column":26}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":27}},"12":{"start":{"line":17,"column":4},"end":{"line":17,"column":25}},"13":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":29}},"15":{"start":{"line":21,"column":15},"end":{"line":26,"column":2}},"16":{"start":{"line":27,"column":29},"end":{"line":27,"column":112}},"17":{"start":{"line":27,"column":98},"end":{"line":27,"column":111}},"18":{"start":{"line":28,"column":15},"end":{"line":28,"column":27}},"19":{"start":{"line":30,"column":20},"end":{"line":63,"column":5}},"20":{"start":{"line":64,"column":4},"end":{"line":79,"column":5}},"21":{"start":{"line":65,"column":8},"end":{"line":65,"column":37}},"22":{"start":{"line":66,"column":8},"end":{"line":66,"column":43}},"23":{"start":{"line":67,"column":8},"end":{"line":67,"column":37}},"24":{"start":{"line":69,"column":9},"end":{"line":79,"column":5}},"25":{"start":{"line":70,"column":8},"end":{"line":70,"column":43}},"26":{"start":{"line":71,"column":8},"end":{"line":71,"column":37}},"27":{"start":{"line":73,"column":9},"end":{"line":79,"column":5}},"28":{"start":{"line":74,"column":8},"end":{"line":74,"column":37}},"29":{"start":{"line":75,"column":8},"end":{"line":75,"column":37}},"30":{"start":{"line":77,"column":9},"end":{"line":79,"column":5}},"31":{"start":{"line":78,"column":8},"end":{"line":78,"column":37}},"32":{"start":{"line":80,"column":4},"end":{"line":80,"column":19}},"33":{"start":{"line":83,"column":4},"end":{"line":98,"column":6}},"34":{"start":{"line":101,"column":4},"end":{"line":111,"column":6}},"35":{"start":{"line":113,"column":0},"end":{"line":189,"column":3}},"36":{"start":{"line":114,"column":21},"end":{"line":114,"column":36}},"37":{"start":{"line":115,"column":20},"end":{"line":115,"column":38}},"38":{"start":{"line":116,"column":25},"end":{"line":116,"column":27}},"39":{"start":{"line":117,"column":4},"end":{"line":125,"column":7}},"40":{"start":{"line":126,"column":4},"end":{"line":186,"column":5}},"41":{"start":{"line":127,"column":24},"end":{"line":127,"column":54}},"42":{"start":{"line":128,"column":8},"end":{"line":128,"column":55}},"43":{"start":{"line":130,"column":9},"end":{"line":186,"column":5}},"44":{"start":{"line":131,"column":22},"end":{"line":131,"column":40}},"45":{"start":{"line":132,"column":8},"end":{"line":179,"column":18}},"46":{"start":{"line":181,"column":9},"end":{"line":186,"column":5}},"47":{"start":{"line":182,"column":24},"end":{"line":184,"column":9}},"48":{"start":{"line":185,"column":8},"end":{"line":185,"column":55}},"49":{"start":{"line":187,"column":4},"end":{"line":187,"column":41}},"50":{"start":{"line":188,"column":4},"end":{"line":188,"column":94}},"51":{"start":{"line":190,"column":0},"end":{"line":190,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":1},"end":{"line":9,"column":2}},"loc":{"start":{"line":9,"column":17},"end":{"line":13,"column":1}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":1},"end":{"line":15,"column":2}},"loc":{"start":{"line":15,"column":18},"end":{"line":20,"column":1}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":87},"end":{"line":27,"column":88}},"loc":{"start":{"line":27,"column":98},"end":{"line":27,"column":111}},"line":27},"3":{"name":"projectAggregation","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":27}},"loc":{"start":{"line":29,"column":35},"end":{"line":81,"column":1}},"line":29},"4":{"name":"groupAggregation","decl":{"start":{"line":82,"column":9},"end":{"line":82,"column":25}},"loc":{"start":{"line":82,"column":28},"end":{"line":99,"column":1}},"line":82},"5":{"name":"sortAggregation","decl":{"start":{"line":100,"column":9},"end":{"line":100,"column":24}},"loc":{"start":{"line":100,"column":27},"end":{"line":112,"column":1}},"line":100},"6":{"name":"(anonymous_6)","decl":{"start":{"line":113,"column":45},"end":{"line":113,"column":46}},"loc":{"start":{"line":113,"column":64},"end":{"line":189,"column":1}},"line":113}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":22}},"type":"binary-expr","locations":[{"start":{"line":13,"column":3},"end":{"line":13,"column":7}},{"start":{"line":13,"column":12},"end":{"line":13,"column":21}}],"line":13},"1":{"loc":{"start":{"line":20,"column":3},"end":{"line":20,"column":24}},"type":"binary-expr","locations":[{"start":{"line":20,"column":3},"end":{"line":20,"column":8}},{"start":{"line":20,"column":13},"end":{"line":20,"column":23}}],"line":20},"2":{"loc":{"start":{"line":64,"column":4},"end":{"line":79,"column":5}},"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":79,"column":5}},{"start":{"line":64,"column":4},"end":{"line":79,"column":5}}],"line":64},"3":{"loc":{"start":{"line":69,"column":9},"end":{"line":79,"column":5}},"type":"if","locations":[{"start":{"line":69,"column":9},"end":{"line":79,"column":5}},{"start":{"line":69,"column":9},"end":{"line":79,"column":5}}],"line":69},"4":{"loc":{"start":{"line":73,"column":9},"end":{"line":79,"column":5}},"type":"if","locations":[{"start":{"line":73,"column":9},"end":{"line":79,"column":5}},{"start":{"line":73,"column":9},"end":{"line":79,"column":5}}],"line":73},"5":{"loc":{"start":{"line":77,"column":9},"end":{"line":79,"column":5}},"type":"if","locations":[{"start":{"line":77,"column":9},"end":{"line":79,"column":5}},{"start":{"line":77,"column":9},"end":{"line":79,"column":5}}],"line":77},"6":{"loc":{"start":{"line":126,"column":4},"end":{"line":186,"column":5}},"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":186,"column":5}},{"start":{"line":126,"column":4},"end":{"line":186,"column":5}}],"line":126},"7":{"loc":{"start":{"line":130,"column":9},"end":{"line":186,"column":5}},"type":"if","locations":[{"start":{"line":130,"column":9},"end":{"line":186,"column":5}},{"start":{"line":130,"column":9},"end":{"line":186,"column":5}}],"line":130},"8":{"loc":{"start":{"line":181,"column":9},"end":{"line":186,"column":5}},"type":"if","locations":[{"start":{"line":181,"column":9},"end":{"line":186,"column":5}},{"start":{"line":181,"column":9},"end":{"line":186,"column":5}}],"line":181}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":9,"14":9,"15":9,"16":9,"17":0,"18":9,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":9,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":9},"f":{"0":9,"1":9,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"0":[9,9],"1":[9,9],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"file":"Traffic.js","sourceRoot":"","sources":["Traffic.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Router from 'koa-router';\nimport * as Joi from 'joi';\nimport * as moment from 'moment';\nimport { messageRepository } from 'lexica-dialog-repository';\nimport { createValidationMiddleware } from '../../middlewares/ValidationMiddleware';\n\nenum Type {\n  TOTAL = 'TOTAL',\n  CATEGORIES = 'CATEGORIES',\n  CHANNELS = 'CHANNELS',\n}\n\nenum Group {\n  HOUR = 'HOUR',\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n}\n\nconst schema = Joi.object().keys({\n  end: Joi.string().isoDate().required(),\n  group: Joi.string().allow(\n    Group.HOUR,\n    Group.DAY,\n    Group.WEEK,\n    Group.MONTH,\n  ).only().default(Group.DAY),\n  start: Joi.string().isoDate().required(),\n  type: Joi.string().allow(\n    Type.TOTAL,\n    Type.CATEGORIES,\n    Type.CHANNELS,\n  ).only().default(Type.TOTAL),\n});\n\nconst validationMiddleware = createValidationMiddleware(schema, context => context.query);\nconst router = new Router();\n\nfunction projectAggregation(group: Group) {\n\n  const project = {\n    $project: {\n      dayOfMonth: {\n        $dayOfMonth: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      hour: {\n        $hour: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      month: {\n        $month: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      week: {\n        $week: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n      year: {\n        $year: {\n          date: '$date',\n          timezone:'Asia/Hong_Kong',\n        },\n      },\n    },\n  };\n\n  if (group === Group.MONTH) {\n    delete project.$project.week;\n    delete project.$project.dayOfMonth;\n    delete project.$project.hour;\n  } else if (group === Group.WEEK) {\n    delete project.$project.dayOfMonth;\n    delete project.$project.hour;\n  } else if (group === Group.DAY) {\n    delete project.$project.week;\n    delete project.$project.hour;\n  } else if (group === Group.HOUR) {\n    delete project.$project.week;\n  }\n\n  return project;\n\n}\n\nfunction groupAggregation() {\n  return {\n    $group: {\n      _id: {\n        category: '$category',\n        channel: '$channel',\n        dayOfMonth: '$dayOfMonth',\n        hour: '$hour',\n        month: '$month',\n        week: '$week',\n        year: '$year',\n      },\n      count: {\n        $sum: 1,\n      },\n    },\n  };\n}\n\nfunction sortAggregation() {\n  return {\n    $sort: {\n      '_id.category': 1,\n      '_id.channel': 1,\n      '_id.dayOfMonth': 1,\n      '_id.hour': 1,\n      '_id.month': 1,\n      '_id.week': 1,\n      '_id.year': 1,\n    },\n  };\n}\n\nrouter.get('/traffic', validationMiddleware, async (context) => {\n  const { body } = context.request;\n  const { uni } = context.state.user;\n  const aggregations: object[] = [];\n\n  aggregations.push({\n    $match: {\n      date: {\n        $gte: moment.utc(body.start).startOf('day').toDate(),\n        $lte: moment.utc(body.end).endOf('day').toDate(),\n      },\n      uni,\n    },\n  });\n\n  if (body.type === Type.TOTAL) {\n    const project = projectAggregation(body.group);\n    aggregations.push(project, groupAggregation());\n  } else if (body.type === Type.CATEGORIES) {\n    const group = groupAggregation();\n    aggregations.push(\n      {\n        $unwind: '$commands',\n      },\n      {\n        $lookup: {\n          as: 'intent',\n          foreignField: 'command',\n          from: 'Intents',\n          localField: 'commands',\n        },\n      },\n      {\n        $unwind: '$intent',\n      },\n      {\n        $redact: {\n          $cond: {\n            else: '$$PRUNE',\n            if: {\n              $and: [\n                {\n                  $eq: ['$uni', '$intent.uni'],\n                },\n              ],\n            },\n            then: '$$KEEP',\n          },\n        },\n      },\n      {\n        $project: {\n          ...projectAggregation(body.group).$project,\n          category: '$intent.category',\n        },\n      },\n      {\n        $match: {\n          category: {\n            $not: /^hidden/ig,\n          },\n        },\n      },\n      {\n        $group: {\n          _id:{\n            ...group.$group._id,\n            mid: '$_id',\n          },\n          count: {\n            ...group.$group.count,\n          },\n        },\n      },\n      {\n        $project: {\n          category: '$_id.category',\n          dayOfMonth: '$_id.dayOfMonth',\n          hour: '$_id.hour',\n          month: '$_id.month',\n          week: '$_id.week',\n          year: '$_id.year',\n        },\n      },\n      group,\n    );\n  } else if (body.type === Type.CHANNELS) {\n    const project = {\n      $project: {\n        ...projectAggregation(body.group).$project,\n        channel: '$messenger',\n      },\n    };\n    aggregations.push(project, groupAggregation());\n  }\n\n  aggregations.push(sortAggregation());\n\n  context.body = await messageRepository.aggregate(aggregations);\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"8a77d4f2eb2f026c5b8e1f9a4b09a508330157ab"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/data-analytics/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/data-analytics/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":26},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":15},"end":{"line":8,"column":2}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":39}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":47}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":25}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,uCAA+C;AAC/C,uDAA+D;AAE/D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,iBAAiB;CAC1B,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,EAAE,CAAC,CAAC;AAC7B,MAAM,CAAC,GAAG,CAAC,yBAAe,CAAC,MAAM,EAAE,CAAC,CAAC;AAErC,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { default as traffic } from './Traffic';\nimport { default as messageComments } from './MessageComments';\n\nconst router = new Router({\n  prefix: '/data-analytics',\n});\n\nrouter.use(traffic.routes());\nrouter.use(messageComments.routes());\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"6e5fa83d0f563991f0af86c0d9799a8ffd96efa1"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/resources/Resources.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/resources/Resources.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":59}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":59}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":13},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":34}},"6":{"start":{"line":8,"column":35},"end":{"line":8,"column":70}},"7":{"start":{"line":9,"column":15},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":26},"end":{"line":16,"column":1}},"9":{"start":{"line":18,"column":4},"end":{"line":35,"column":8}},"10":{"start":{"line":19,"column":86},"end":{"line":19,"column":92}},"11":{"start":{"line":20,"column":23},"end":{"line":20,"column":71}},"12":{"start":{"line":21,"column":28},"end":{"line":21,"column":79}},"13":{"start":{"line":22,"column":34},"end":{"line":22,"column":98}},"14":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"15":{"start":{"line":24,"column":12},"end":{"line":24,"column":19}},"16":{"start":{"line":26,"column":30},"end":{"line":26,"column":82}},"17":{"start":{"line":27,"column":8},"end":{"line":34,"column":10}},"18":{"start":{"line":37,"column":0},"end":{"line":64,"column":3}},"19":{"start":{"line":38,"column":20},"end":{"line":38,"column":34}},"20":{"start":{"line":39,"column":24},"end":{"line":39,"column":41}},"21":{"start":{"line":40,"column":25},"end":{"line":40,"column":27}},"22":{"start":{"line":41,"column":20},"end":{"line":41,"column":84}},"23":{"start":{"line":42,"column":4},"end":{"line":63,"column":5}},"24":{"start":{"line":43,"column":30},"end":{"line":43,"column":134}},"25":{"start":{"line":44,"column":30},"end":{"line":44,"column":110}},"26":{"start":{"line":45,"column":8},"end":{"line":58,"column":11}},"27":{"start":{"line":46,"column":12},"end":{"line":57,"column":13}},"28":{"start":{"line":47,"column":96},"end":{"line":47,"column":136}},"29":{"start":{"line":48,"column":16},"end":{"line":56,"column":18}},"30":{"start":{"line":61,"column":33},"end":{"line":61,"column":137}},"31":{"start":{"line":62,"column":8},"end":{"line":62,"column":65}},"32":{"start":{"line":65,"column":0},"end":{"line":97,"column":3}},"33":{"start":{"line":66,"column":27},"end":{"line":66,"column":37}},"34":{"start":{"line":67,"column":32},"end":{"line":67,"column":46}},"35":{"start":{"line":68,"column":56},"end":{"line":68,"column":72}},"36":{"start":{"line":69,"column":25},"end":{"line":69,"column":95}},"37":{"start":{"line":70,"column":4},"end":{"line":96,"column":5}},"38":{"start":{"line":71,"column":26},"end":{"line":74,"column":10}},"39":{"start":{"line":72,"column":32},"end":{"line":72,"column":111}},"40":{"start":{"line":73,"column":12},"end":{"line":73,"column":58}},"41":{"start":{"line":75,"column":19},"end":{"line":75,"column":82}},"42":{"start":{"line":76,"column":8},"end":{"line":88,"column":11}},"43":{"start":{"line":89,"column":8},"end":{"line":89,"column":41}},"44":{"start":{"line":90,"column":8},"end":{"line":90,"column":43}},"45":{"start":{"line":91,"column":33},"end":{"line":91,"column":137}},"46":{"start":{"line":92,"column":8},"end":{"line":92,"column":130}},"47":{"start":{"line":95,"column":8},"end":{"line":95,"column":29}},"48":{"start":{"line":98,"column":0},"end":{"line":127,"column":3}},"49":{"start":{"line":99,"column":37},"end":{"line":99,"column":47}},"50":{"start":{"line":100,"column":32},"end":{"line":100,"column":46}},"51":{"start":{"line":101,"column":19},"end":{"line":101,"column":144}},"52":{"start":{"line":102,"column":4},"end":{"line":126,"column":5}},"53":{"start":{"line":103,"column":23},"end":{"line":103,"column":91}},"54":{"start":{"line":104,"column":8},"end":{"line":122,"column":9}},"55":{"start":{"line":105,"column":25},"end":{"line":105,"column":35}},"56":{"start":{"line":106,"column":12},"end":{"line":117,"column":15}},"57":{"start":{"line":118,"column":12},"end":{"line":118,"column":81}},"58":{"start":{"line":121,"column":12},"end":{"line":121,"column":33}},"59":{"start":{"line":125,"column":8},"end":{"line":125,"column":50}},"60":{"start":{"line":128,"column":0},"end":{"line":158,"column":3}},"61":{"start":{"line":129,"column":32},"end":{"line":129,"column":46}},"62":{"start":{"line":130,"column":64},"end":{"line":130,"column":80}},"63":{"start":{"line":131,"column":4},"end":{"line":157,"column":5}},"64":{"start":{"line":131,"column":84},"end":{"line":131,"column":89}},"65":{"start":{"line":132,"column":8},"end":{"line":132,"column":29}},"66":{"start":{"line":135,"column":21},"end":{"line":135,"column":31}},"67":{"start":{"line":136,"column":23},"end":{"line":155,"column":10}},"68":{"start":{"line":156,"column":8},"end":{"line":156,"column":60}},"69":{"start":{"line":159,"column":0},"end":{"line":159,"column":25}}},"fnMap":{"0":{"name":"intentParser","decl":{"start":{"line":17,"column":15},"end":{"line":17,"column":27}},"loc":{"start":{"line":17,"column":46},"end":{"line":36,"column":1}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":41},"end":{"line":18,"column":42}},"loc":{"start":{"line":18,"column":59},"end":{"line":35,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":16},"end":{"line":37,"column":17}},"loc":{"start":{"line":37,"column":31},"end":{"line":64,"column":1}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":45,"column":37},"end":{"line":45,"column":38}},"loc":{"start":{"line":45,"column":49},"end":{"line":58,"column":9}},"line":45},"4":{"name":"(anonymous_4)","decl":{"start":{"line":65,"column":29},"end":{"line":65,"column":30}},"loc":{"start":{"line":65,"column":44},"end":{"line":97,"column":1}},"line":65},"5":{"name":"(anonymous_5)","decl":{"start":{"line":71,"column":53},"end":{"line":71,"column":54}},"loc":{"start":{"line":71,"column":67},"end":{"line":74,"column":9}},"line":71},"6":{"name":"(anonymous_6)","decl":{"start":{"line":98,"column":30},"end":{"line":98,"column":31}},"loc":{"start":{"line":98,"column":45},"end":{"line":127,"column":1}},"line":98},"7":{"name":"(anonymous_7)","decl":{"start":{"line":128,"column":16},"end":{"line":128,"column":17}},"loc":{"start":{"line":128,"column":31},"end":{"line":158,"column":1}},"line":128},"8":{"name":"(anonymous_8)","decl":{"start":{"line":131,"column":75},"end":{"line":131,"column":76}},"loc":{"start":{"line":131,"column":84},"end":{"line":131,"column":89}},"line":131}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},{"start":{"line":23,"column":8},"end":{"line":25,"column":9}}],"line":23},"1":{"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":91}},"type":"binary-expr","locations":[{"start":{"line":23,"column":12},"end":{"line":23,"column":52}},{"start":{"line":23,"column":56},"end":{"line":23,"column":91}}],"line":23},"2":{"loc":{"start":{"line":42,"column":4},"end":{"line":63,"column":5}},"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":63,"column":5}},{"start":{"line":42,"column":4},"end":{"line":63,"column":5}}],"line":42},"3":{"loc":{"start":{"line":46,"column":12},"end":{"line":57,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":57,"column":13}},{"start":{"line":46,"column":12},"end":{"line":57,"column":13}}],"line":46},"4":{"loc":{"start":{"line":70,"column":4},"end":{"line":96,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":96,"column":5}},{"start":{"line":70,"column":4},"end":{"line":96,"column":5}}],"line":70},"5":{"loc":{"start":{"line":102,"column":4},"end":{"line":126,"column":5}},"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":126,"column":5}},{"start":{"line":102,"column":4},"end":{"line":126,"column":5}}],"line":102},"6":{"loc":{"start":{"line":104,"column":8},"end":{"line":122,"column":9}},"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":122,"column":9}},{"start":{"line":104,"column":8},"end":{"line":122,"column":9}}],"line":104},"7":{"loc":{"start":{"line":131,"column":4},"end":{"line":157,"column":5}},"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":157,"column":5}},{"start":{"line":131,"column":4},"end":{"line":157,"column":5}}],"line":131}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":9,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":9,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":9,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":9,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":9},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"Resources.js","sourceRoot":"","sources":["Resources.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResponseType } from 'lexica-dialog-model/dist/Intent';\nimport { TicketType, TicketStatus, AddPayload } from 'lexica-dialog-model/dist/Ticket';\nimport * as Router from 'koa-router';\nimport * as Boom from 'boom';\nimport {\n  filter, find, assign, isNil, defaultTo, result as _result, every, pick,\n\n} from 'lodash';\n\nimport {\n  intentRepository,\n  IntentModel,\n  ticketRepository,\n  TicketModel,\n} from 'lexica-dialog-repository';\n\nconst router = new Router();\n\nconst ticketRequiredKey = [\n  'id',\n  'payload.category',\n  'payload.subCategory',\n  'payload.responses',\n  'payload.sampleQuestion',\n];\n\nasync function intentParser(intents: IntentModel[], tickets: TicketModel[]) {\n  return await Promise.all(intents.map(async (intent) => {\n    const { _id: id, responses, category, subCategory: subCat, sampleQuestion } = intent;\n    const ticket = find(tickets, { intentId: String(id) });\n    const subCategory = defaultTo<string>(subCat, '').trim().toUpperCase();\n    const textOnlyResponses = filter(responses, { type: ResponseType.TEXT });\n\n    if (isNil(textOnlyResponses.length) || category.toUpperCase() === 'HIDDEN') {\n      return;\n    }\n\n    const pendingAction = _result(ticket, 'payload.action', undefined);\n\n    return {\n      category: category.trim().toUpperCase(),\n      id,\n      pendingAction,\n      responses,\n      sampleQuestion,\n      subCategory: subCategory.trim().toUpperCase(),\n    };\n  }));\n}\n\nrouter.get('/', async (ctx) => {\n  const { uni } = ctx.state.user;\n  const { pending } = ctx.request.query;\n  const intentResult: { [key: string]: any } = {};\n  const intents = await intentRepository.findByUni(uni);\n\n  if (typeof pending !== 'undefined') {\n    const pendingAction = await ticketRepository.findByUniAndStatus(uni, TicketStatus.PENDING);\n    const pendingIntent = filter(pendingAction, { payload: { action: TicketType.ADD } });\n    ctx.body = pendingIntent.map(\n      (ticket) => {\n        if (ticket.payload.action === TicketType.ADD) {\n          const {\n            id,\n            payload: {\n              category,\n              subCategory,\n              sampleQuestion,\n              responses,\n            },\n          } = pick(ticket, ticketRequiredKey) as\n            {\n              id: any,\n              payload: AddPayload,\n            };\n\n          return {\n            id,\n            payload: {\n              category: category.trim().toUpperCase(),\n              responses,\n              sampleQuestion,\n              subCategory: subCategory.trim().toUpperCase(),\n            },\n          };\n        }\n      });\n  } else {\n    const allPendingTicket = await ticketRepository.findByUniAndStatus(uni, TicketStatus.PENDING);\n    ctx.body = await intentParser(intents, allPendingTicket);\n  }\n});\n\nrouter.patch('/:resourceId', async (ctx) => {\n  const { resourceId } = ctx.params;\n  const { uni, id: userId } = ctx.state.user;\n  const { responses: newResponses, sampleQuestion } = ctx.request.body;\n  const oldResponses = await intentRepository.findById(resourceId);\n\n  if (!isNil(oldResponses)) {\n    const responses = oldResponses.responses.map((response: any) => {\n      const newResponse = defaultTo(find(newResponses, { _id: response.id }), response);\n      return assign(response, newResponse);\n    });\n    const sq = defaultTo(sampleQuestion, oldResponses.sampleQuestion);\n    await ticketRepository.save({\n      date: new Date,\n      intentId: resourceId,\n      origin: oldResponses,\n      payload: {\n        action: TicketType.UPDATE,\n        responses,\n        sampleQuestion:sq,\n      },\n      status: TicketStatus.COMPLETED,\n      uni,\n      userId,\n    });\n    oldResponses.sampleQuestion = sq;\n    oldResponses.responses = responses;\n    const allPendingTicket = await ticketRepository.findByUniAndStatus(uni, TicketStatus.PENDING);\n    ctx.body = await intentParser([(await intentRepository.save(oldResponses))], allPendingTicket);\n  } else {\n    throw Boom.badData();\n  }\n});\n\nrouter.delete('/:resourceId', async (ctx) => {\n  const { resourceId: intentId } = ctx.params;\n  const { uni, id: userId } = ctx.state.user;\n\n  const ticket = await ticketRepository.findByUniAndStatusAndIntentId(\n    uni,\n    TicketStatus.PENDING,\n    intentId,\n  );\n\n  if (isNil(ticket)) {\n    const intent = await intentRepository.findById(intentId);\n    if (!isNil(intent)) {\n      const date = new Date();\n      await ticketRepository.save({\n        date,\n        intentId,\n        origin: intent,\n        payload: {\n          action: TicketType.DELETE,\n          delete: false\n        },\n        status: TicketStatus.PENDING,\n        uni,\n        userId,\n      });\n      ctx.body = [intent.category, intent.subCategory, intentId].join('.');\n    } else {\n      throw Boom.badData();\n    }\n  } else {\n    ctx.body = 'already pending for deletion';\n  }\n});\n\nrouter.put('/', async (ctx) => {\n  const { uni, id: userId } = ctx.state.user;\n  const { category, subCategory, sampleQuestion, response } = ctx.request.body;\n\n  if (!every([category, subCategory, sampleQuestion, response], value => value)) {\n    throw Boom.badData();\n  } else {\n    const date = new Date();\n    const ticket = await ticketRepository.save({\n      date,\n      payload: {\n        action: TicketType.ADD,\n        category,\n        responses: [{\n          messages: [\n            {\n              'en-GB': response,\n            },\n          ],\n          type: ResponseType.TEXT,\n        }],\n        sampleQuestion,\n        subCategory,\n      },\n      status: TicketStatus.PENDING,\n      uni,\n      userId,\n    });\n    ctx.body = pick(ticket, ticketRequiredKey);\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"ecd266b210b29346ae7d4610d175de0cf4d62e09"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/resources/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/resources/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":42}},"3":{"start":{"line":5,"column":15},"end":{"line":7,"column":2}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":41}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":25}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,2CAAmD;AAEnD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,YAAY;CACrB,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,mBAAS,CAAC,MAAM,EAAE,CAAC,CAAC;AAE/B,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { default as resources } from './Resources';\n\nconst router = new Router({\n  prefix: '/resources',\n});\n\nrouter.use(resources.routes());\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"5a3ab050c16b0d62b82d61d07a9a309b67f0bbea"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Constants.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Constants.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":15},"end":{"line":10,"column":1}},"3":{"start":{"line":11,"column":0},"end":{"line":11,"column":24}},"4":{"start":{"line":12,"column":20},"end":{"line":12,"column":55}},"5":{"start":{"line":13,"column":0},"end":{"line":13,"column":34}},"6":{"start":{"line":14,"column":22},"end":{"line":14,"column":59}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":38}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"Constants.js","sourceRoot":"","sources":["Constants.ts"],"names":[],"mappings":";;AAAA,+CAA8C;AAE9C,MAAM,MAAM,GAAG;IACb,MAAM,EAAE;QACN,CAAC,EAAE,QAAQ,CAAC,uBAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;QACrC,CAAC,EAAE,QAAQ,CAAC,uBAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;QACrC,CAAC,EAAE,QAAQ,CAAC,uBAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;KACtC;CACF,CAAC;AAMA,wBAAM;AAJR,MAAM,WAAW,GAAG,uBAAW,CAAC,WAAW,CAAC;AAK1C,kCAAW;AAJb,MAAM,aAAa,GAAG,uBAAW,CAAC,aAAa,CAAC;AAK9C,sCAAa","sourcesContent":["import { ENV_CONFIGS } from '../../Constants';\n\nconst SCRYPT = {\n  PARAMS: {\n    N: parseInt(ENV_CONFIGS.SCRYPT_N, 10),\n    p: parseInt(ENV_CONFIGS.SCRYPT_P, 10),\n    r: parseInt(ENV_CONFIGS.SCRYPT_R, 10),\n  },\n};\n\nconst SCRYPT_SALT = ENV_CONFIGS.SCRYPT_SALT;\nconst SCRYPT_KEYLEN = ENV_CONFIGS.SCRYPT_KEYLEN;\n\nexport {\n  SCRYPT,\n  SCRYPT_SALT,\n  SCRYPT_KEYLEN\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"5c9ba3d8c7040724e47a03272e9088e110284481"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Shared.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Shared.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":42}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":26},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":21},"end":{"line":9,"column":1}},"5":{"start":{"line":7,"column":19},"end":{"line":7,"column":121}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":46}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"8":{"start":{"line":11,"column":24},"end":{"line":14,"column":1}},"9":{"start":{"line":12,"column":19},"end":{"line":12,"column":121}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":57}},"11":{"start":{"line":15,"column":0},"end":{"line":15,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":21},"end":{"line":6,"column":22}},"loc":{"start":{"line":6,"column":44},"end":{"line":9,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":24},"end":{"line":11,"column":25}},"loc":{"start":{"line":11,"column":55},"end":{"line":14,"column":1}},"line":11}},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":0,"6":0,"7":9,"8":9,"9":0,"10":0,"11":9},"f":{"0":0,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"Shared.js","sourceRoot":"","sources":["Shared.ts"],"names":[],"mappings":";;AACA,2CAAiE;AAGjE,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,MAAM,iBAAiB,GAAG,QAAQ,CAAC;AAWnC,MAAM,YAAY,GAAG,KAAK,EAAE,WAAmB,EAAE,EAAE;IACjD,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,uBAAW,EAAE,yBAAa,EAAE,kBAAM,CAAC,CAAC;IAClF,OAAO,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;AAC5C,CAAC,CAAA;AAQC,oCAAY;AANd,MAAM,eAAe,GAAG,KAAK,EAAC,WAAmB,EAAE,MAAc,EAAE,EAAE;IACnE,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,uBAAW,EAAE,yBAAa,EAAE,kBAAM,CAAC,CAAC;IAClF,OAAO,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,MAAM,CAAC;AACvD,CAAC,CAAA;AAIC,0CAAe","sourcesContent":["import * as s from '../../Server';\nimport { SCRYPT, SCRYPT_SALT, SCRYPT_KEYLEN } from './Constants';\n\n// const scrypt = require('scrypt');\nconst crypto = require('crypto');\nconst toStringAlgorithm = 'base64';\n\n// const hashPassword = async (raw: string) => {\n//   const output = await scrypt.kdf(raw, SCRYPT.PARAMS);\n//   return output.toString(toStringAlgorithm);\n// };\n\n// const isPasswordMatch = async (raw: string, hashed: string) => {\n//   return await scrypt.verifyKdf(new Buffer(hashed, toStringAlgorithm), raw);\n// };\n\nconst hashPassword = async (rawPassword: string) => {\n  const output = crypto.scryptSync(rawPassword, SCRYPT_SALT, SCRYPT_KEYLEN, SCRYPT);\n  return output.toString(toStringAlgorithm);\n}\n\nconst isPasswordMatch = async(rawPassword: string, hashed: string) => {\n  const output = crypto.scryptSync(rawPassword, SCRYPT_SALT, SCRYPT_KEYLEN, SCRYPT);\n  return output.toString(toStringAlgorithm) === hashed;\n}\n\nexport {\n  hashPassword,\n  isPasswordMatch,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"80d6017642800bc3e2a1547557c83fddf861f4e2"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Token.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Token.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":12},"end":{"line":5,"column":26}},"4":{"start":{"line":6,"column":12},"end":{"line":6,"column":35}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":34}},"6":{"start":{"line":8,"column":20},"end":{"line":8,"column":46}},"7":{"start":{"line":9,"column":35},"end":{"line":9,"column":70}},"8":{"start":{"line":10,"column":31},"end":{"line":10,"column":80}},"9":{"start":{"line":11,"column":17},"end":{"line":11,"column":36}},"10":{"start":{"line":12,"column":24},"end":{"line":12,"column":79}},"11":{"start":{"line":13,"column":15},"end":{"line":13,"column":27}},"12":{"start":{"line":14,"column":15},"end":{"line":18,"column":2}},"13":{"start":{"line":19,"column":29},"end":{"line":19,"column":86}},"14":{"start":{"line":20,"column":0},"end":{"line":42,"column":3}},"15":{"start":{"line":21,"column":17},"end":{"line":21,"column":37}},"16":{"start":{"line":22,"column":17},"end":{"line":22,"column":110}},"17":{"start":{"line":23,"column":4},"end":{"line":41,"column":5}},"18":{"start":{"line":24,"column":8},"end":{"line":37,"column":9}},"19":{"start":{"line":25,"column":30},"end":{"line":29,"column":13}},"20":{"start":{"line":30,"column":26},"end":{"line":32,"column":14}},"21":{"start":{"line":33,"column":12},"end":{"line":33,"column":37}},"22":{"start":{"line":36,"column":12},"end":{"line":36,"column":70}},"23":{"start":{"line":40,"column":8},"end":{"line":40,"column":45}},"24":{"start":{"line":43,"column":0},"end":{"line":43,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":44},"end":{"line":20,"column":45}},"loc":{"start":{"line":20,"column":63},"end":{"line":42,"column":1}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":4},"end":{"line":41,"column":5}},"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":41,"column":5}},{"start":{"line":23,"column":4},"end":{"line":41,"column":5}}],"line":23},"1":{"loc":{"start":{"line":24,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":37,"column":9}},{"start":{"line":24,"column":8},"end":{"line":37,"column":9}}],"line":24}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9,"12":9,"13":9,"14":9,"15":9,"16":9,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":9},"f":{"0":9},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"file":"Token.js","sourceRoot":"","sources":["Token.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,6BAA6B;AAC7B,2BAA2B;AAC3B,oCAAoC;AACpC,mCAA+B;AAC/B,+CAA8C;AAC9C,uEAA4E;AAC5E,iFAAoF;AACpF,qCAA2C;AAE3C,MAAM,eAAe,GAAG,QAAQ,CAAC,uBAAW,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;AACpE,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAC5B,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC/B,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;IAChD,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;IACtD,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;CAC5D,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,iDAA0B,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;IAC5D,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAClC,MAAM,IAAI,GAAG,MAAM,yCAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAEhF,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,EAAE;QAChB,IAAI,MAAM,wBAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACvD,MAAM,SAAS,GAAG;gBAChB,EAAE,EAAE,IAAI,CAAC,GAAG;gBACZ,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC;YACF,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAW,CAAC,OAAO,EAAE;gBACrD,SAAS,EAAE,eAAe;aAC3B,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,CAAC;SAC1B;aAAM;YACL,MAAM,IAAI,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;SAC3D;KACF;SAAM;QACL,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;KACtC;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport * as Boom from 'boom';\nimport * as Joi from 'joi';\nimport * as jwt from 'jsonwebtoken';\nimport { isNil } from 'lodash';\nimport { ENV_CONFIGS } from '../../Constants';\nimport { userRepository, configRepository } from 'lexica-dialog-repository';\nimport { createValidationMiddleware } from '../../middlewares/ValidationMiddleware';\nimport { isPasswordMatch } from './Shared';\n\nconst jwtExpireSecond = parseInt(ENV_CONFIGS.JWT_EXPIRE_SECOND, 10);\nconst router = new Router();\nconst schema = Joi.object().keys({\n  password: Joi.string().min(3).max(30).required(),\n  uni: Joi.string().alphanum().min(3).max(30).required(),\n  username: Joi.string().alphanum().min(3).max(30).required(),\n});\n\nconst validationMiddleware = createValidationMiddleware(schema);\n\nrouter.post('/token', validationMiddleware, async (context) => {\n  const body = context.request.body;\n  const user = await userRepository.findByUsernameAndUni(body.username, body.uni);\n\n  if (!isNil(user)) {\n    if (await isPasswordMatch(body.password, user.password)) {\n      const tokenBody = {\n        id: user._id,\n        uni: user.uni,\n        username: user.username,\n      };\n      const token = jwt.sign(tokenBody, ENV_CONFIGS.JWT_KEY, {\n        expiresIn: jwtExpireSecond,\n      });\n      context.body = { token };\n    } else {\n      throw Boom.badData('username or password is not correct');\n    }\n  } else {\n    throw Boom.badData('user not found');\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"5310624ee01568e50171d222fc0420dfa5823bff"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Types.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Types.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":35},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":46}},"5":{"start":{"line":7,"column":15},"end":{"line":7,"column":27}},"6":{"start":{"line":8,"column":0},"end":{"line":17,"column":3}},"7":{"start":{"line":9,"column":20},"end":{"line":10,"column":92}},"8":{"start":{"line":11,"column":4},"end":{"line":16,"column":5}},"9":{"start":{"line":12,"column":8},"end":{"line":12,"column":33}},"10":{"start":{"line":15,"column":8},"end":{"line":15,"column":112}},"11":{"start":{"line":18,"column":0},"end":{"line":18,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":21},"end":{"line":8,"column":22}},"loc":{"start":{"line":8,"column":36},"end":{"line":17,"column":1}},"line":8}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":4},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":16,"column":5}},{"start":{"line":11,"column":4},"end":{"line":16,"column":5}}],"line":11}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":0,"8":0,"9":0,"10":0,"11":9},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"Types.js","sourceRoot":"","sources":["Types.ts"],"names":[],"mappings":";;AACA,qCAAqC;AACrC,mCAA+B;AAC/B,uEAAyE;AACzE,+CAA0D;AAE1D,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAE5B,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IACjC,MAAM,OAAO,GAAG,MAAM,2CAAgB;SACnC,qBAAqB,CAAC,sBAAU,EAAE,uBAAW,CAAC,YAAY,CAAC,CAAC;IAC/D,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;KAC1B;SAAM;QACL,IAAI,KAAK,CAAC,WAAW,uBAAW,CAAC,YAAY,iBAAiB,sBAAU,MAAM,CAAC,CAAC;KACjF;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Boom  from 'boom';\nimport * as Router from 'koa-router';\nimport { isNil } from 'lodash';\nimport { configRepository, ConfigModel } from 'lexica-dialog-repository';\nimport { CONFIG_KEYS, GLOBAL_UNI } from '../../Constants';\n\nconst router = new Router();\n\nrouter.get('/types', async (ctx) => {\n  const uniList = await configRepository\n    .findConfigByUniAndKey(GLOBAL_UNI, CONFIG_KEYS.TOKENS_TYPES);\n  if (!isNil(uniList)) {\n    ctx.body = uniList.value;\n  } else {\n    new Error(`Config: ${CONFIG_KEYS.TOKENS_TYPES} not found of ${GLOBAL_UNI} uni`);\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"1419d03345094598b156b67e3d1e9ab528b3a6c2"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Users.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Users.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":13},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":36}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":35},"end":{"line":6,"column":70}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":36}},"6":{"start":{"line":8,"column":15},"end":{"line":8,"column":27}},"7":{"start":{"line":9,"column":0},"end":{"line":24,"column":3}},"8":{"start":{"line":10,"column":40},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":27},"end":{"line":11,"column":64}},"10":{"start":{"line":12,"column":17},"end":{"line":12,"column":100}},"11":{"start":{"line":13,"column":4},"end":{"line":23,"column":5}},"12":{"start":{"line":14,"column":8},"end":{"line":14,"column":52}},"13":{"start":{"line":17,"column":8},"end":{"line":21,"column":11}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":37}},"15":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":17},"end":{"line":9,"column":18}},"loc":{"start":{"line":9,"column":32},"end":{"line":24,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":4},"end":{"line":23,"column":5}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":23,"column":5}},{"start":{"line":13,"column":4},"end":{"line":23,"column":5}}],"line":13}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":9},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"Users.js","sourceRoot":"","sources":["Users.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,qCAAqC;AACrC,mCAA+B;AAC/B,uEAAqE;AACrE,qCAAwC;AAExC,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAE5B,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IAC7B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;IACrD,MAAM,cAAc,GAAG,MAAM,qBAAY,CAAC,QAAQ,CAAC,CAAC;IACpD,MAAM,IAAI,GAAG,MAAM,yCAAc,CAAC,oBAAoB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IACtE,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,EAAE;QAChB,MAAM,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;KAC7C;SAAM;QACL,MAAM,yCAAc,CAAC,MAAM,CAAC;YAC1B,QAAQ,EAAE,cAAc;YACxB,GAAG;YACH,QAAQ;SACT,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;KAC9B;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Boom from 'boom';\nimport * as Router from 'koa-router';\nimport { isNil } from 'lodash';\nimport { userRepository, UserModel } from 'lexica-dialog-repository';\nimport { hashPassword } from './Shared';\n\nconst router = new Router();\n\nrouter.post('/', async (ctx) => {\n  const { username, password, uni } = ctx.request.body;\n  const hashedPassword = await hashPassword(password);\n  const user = await userRepository.findByUsernameAndUni(username, uni);\n  if (!isNil(user)) {\n    throw Boom.badRequest('user already exist');\n  } else {\n    await userRepository.create({\n      password: hashedPassword,\n      uni,\n      username,\n    });\n    ctx.body = { message: 'ok' };\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"c03b546c186cfec20c150e3c1acdf7136a1b3697"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Validate.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/Validate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":27},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":27}},"4":{"start":{"line":6,"column":0},"end":{"line":13,"column":3}},"5":{"start":{"line":7,"column":4},"end":{"line":12,"column":5}},"6":{"start":{"line":8,"column":8},"end":{"line":8,"column":36}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":37}},"8":{"start":{"line":14,"column":0},"end":{"line":14,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":90},"end":{"line":6,"column":91}},"loc":{"start":{"line":6,"column":105},"end":{"line":13,"column":1}},"line":6}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":12,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":12,"column":5}},{"start":{"line":7,"column":4},"end":{"line":12,"column":5}}],"line":7}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":0,"6":0,"7":0,"8":9},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"Validate.js","sourceRoot":"","sources":["Validate.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,yEAA4E;AAE5E,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAE5B,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,yCAAsB,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;IACnF,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;QAClB,GAAG,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;KAC7B;SAAM;QACL,GAAG,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;KAC9B;AACH,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { createKaoJwtMiddleware } from '../../middlewares/KoaJwtMiddleware';\n\nconst router = new Router();\n\nrouter.get('/validate', createKaoJwtMiddleware({ passthrough: true }), async (ctx) => {\n  if (ctx.state.user) {\n    ctx.body = { result: true };\n  } else {\n    ctx.body = { result: false };\n  }\n});\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"b2d9aaf1cc3442d8314f9ad6780c7d10555a1a68"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/api/users/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":19},"end":{"line":6,"column":40}},"5":{"start":{"line":7,"column":16},"end":{"line":7,"column":34}},"6":{"start":{"line":8,"column":15},"end":{"line":10,"column":2}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":40}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":37}},"11":{"start":{"line":15,"column":0},"end":{"line":15,"column":25}}},"fnMap":{},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":9,"8":9,"9":9,"10":9,"11":9},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,mCAA2C;AAC3C,mCAA2C;AAC3C,yCAAiD;AACjD,mCAA2C;AAE3C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,QAAQ;CACjB,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,EAAE,CAAC,CAAC;AAC3B,MAAM,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,EAAE,CAAC,CAAC;AAC3B,MAAM,CAAC,GAAG,CAAC,kBAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AAC9B,MAAM,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,EAAE,CAAC,CAAC;AAE3B,kBAAe,MAAM,CAAC","sourcesContent":["import * as Router from 'koa-router';\nimport { default as token } from './Token';\nimport { default as types } from './Types';\nimport { default as validate } from './Validate';\nimport { default as users } from './Users';\n\nconst router = new Router({\n  prefix: '/users',\n});\n\nrouter.use(token.routes());\nrouter.use(types.routes());\nrouter.use(validate.routes());\nrouter.use(users.routes());\n\nexport default router;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"9149c1138537fe13d1d19426033cef905b4b7593"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/KoaJwtMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/KoaJwtMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":33}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":43}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":43}},"4":{"start":{"line":6,"column":31},"end":{"line":6,"column":95}},"5":{"start":{"line":6,"column":44},"end":{"line":6,"column":95}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":31},"end":{"line":6,"column":32}},"loc":{"start":{"line":6,"column":44},"end":{"line":6,"column":95}},"line":6}},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":27,"6":9},"f":{"0":27},"b":{},"inputSourceMap":{"version":3,"file":"KoaJwtMiddleware.js","sourceRoot":"","sources":["KoaJwtMiddleware.ts"],"names":[],"mappings":";;AAAA,kCAAkC;AAClC,4CAA2C;AAE3C,MAAM,EAAE,OAAO,EAAE,GAAG,uBAAW,CAAC;AAEhC,MAAM,sBAAsB,GAAG,CAAC,OAAa,EAAE,EAAE,CAAC,MAAM,iBACtD,MAAM,EAAE,OAAiB,IACtB,OAAO,EACV,CAAC;AAGD,wDAAsB","sourcesContent":["import * as koaJwt from 'koa-jwt';\nimport { ENV_CONFIGS } from '../Constants';\n\nconst { JWT_KEY } = ENV_CONFIGS;\n\nconst createKaoJwtMiddleware = (options?: any) => koaJwt({\n  secret: JWT_KEY as string,\n  ...options,\n});\n\nexport {\n  createKaoJwtMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"022d696fb31d283033109a153659d8d6b991cf72"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/PageableMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/PageableMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":35},"end":{"line":4,"column":70}},"3":{"start":{"line":5,"column":27},"end":{"line":45,"column":1}},"4":{"start":{"line":6,"column":23},"end":{"line":43,"column":5}},"5":{"start":{"line":7,"column":35},"end":{"line":7,"column":44}},"6":{"start":{"line":9,"column":8},"end":{"line":14,"column":9}},"7":{"start":{"line":10,"column":12},"end":{"line":10,"column":21}},"8":{"start":{"line":13,"column":12},"end":{"line":13,"column":38}},"9":{"start":{"line":15,"column":8},"end":{"line":20,"column":9}},"10":{"start":{"line":16,"column":12},"end":{"line":16,"column":31}},"11":{"start":{"line":19,"column":12},"end":{"line":19,"column":38}},"12":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"13":{"start":{"line":22,"column":12},"end":{"line":22,"column":22}},"14":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"15":{"start":{"line":25,"column":12},"end":{"line":25,"column":27}},"16":{"start":{"line":27,"column":8},"end":{"line":40,"column":224}},"17":{"start":{"line":28,"column":24},"end":{"line":28,"column":38}},"18":{"start":{"line":29,"column":30},"end":{"line":29,"column":72}},"19":{"start":{"line":30,"column":30},"end":{"line":30,"column":95}},"20":{"start":{"line":32,"column":25},"end":{"line":32,"column":34}},"21":{"start":{"line":33,"column":30},"end":{"line":33,"column":122}},"22":{"start":{"line":34,"column":12},"end":{"line":37,"column":14}},"23":{"start":{"line":39,"column":27},"end":{"line":39,"column":156}},"24":{"start":{"line":40,"column":25},"end":{"line":40,"column":221}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":91}},"26":{"start":{"line":42,"column":8},"end":{"line":42,"column":21}},"27":{"start":{"line":44,"column":4},"end":{"line":44,"column":22}},"28":{"start":{"line":46,"column":0},"end":{"line":46,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":27},"end":{"line":5,"column":28}},"loc":{"start":{"line":5,"column":69},"end":{"line":45,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":23},"end":{"line":6,"column":24}},"loc":{"start":{"line":6,"column":44},"end":{"line":43,"column":5}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":17},"end":{"line":28,"column":18}},"loc":{"start":{"line":28,"column":24},"end":{"line":28,"column":38}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":20},"end":{"line":29,"column":21}},"loc":{"start":{"line":29,"column":30},"end":{"line":29,"column":72}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":20},"end":{"line":30,"column":21}},"loc":{"start":{"line":30,"column":30},"end":{"line":30,"column":95}},"line":30},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":17},"end":{"line":31,"column":18}},"loc":{"start":{"line":31,"column":29},"end":{"line":38,"column":9}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":20},"end":{"line":39,"column":21}},"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":156}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":40,"column":17},"end":{"line":40,"column":18}},"loc":{"start":{"line":40,"column":25},"end":{"line":40,"column":221}},"line":40}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":30},"end":{"line":5,"column":46}},"type":"default-arg","locations":[{"start":{"line":5,"column":44},"end":{"line":5,"column":46}}],"line":5},"1":{"loc":{"start":{"line":5,"column":48},"end":{"line":5,"column":62}},"type":"default-arg","locations":[{"start":{"line":5,"column":58},"end":{"line":5,"column":62}}],"line":5},"2":{"loc":{"start":{"line":9,"column":8},"end":{"line":14,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":14,"column":9}},{"start":{"line":9,"column":8},"end":{"line":14,"column":9}}],"line":9},"3":{"loc":{"start":{"line":9,"column":12},"end":{"line":9,"column":44}},"type":"binary-expr","locations":[{"start":{"line":9,"column":12},"end":{"line":9,"column":32}},{"start":{"line":9,"column":36},"end":{"line":9,"column":44}}],"line":9},"4":{"loc":{"start":{"line":15,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":20,"column":9}},{"start":{"line":15,"column":8},"end":{"line":20,"column":9}}],"line":15},"5":{"loc":{"start":{"line":15,"column":12},"end":{"line":15,"column":45}},"type":"binary-expr","locations":[{"start":{"line":15,"column":12},"end":{"line":15,"column":32}},{"start":{"line":15,"column":36},"end":{"line":15,"column":45}}],"line":15},"6":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"7":{"loc":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},{"start":{"line":24,"column":8},"end":{"line":26,"column":9}}],"line":24},"8":{"loc":{"start":{"line":29,"column":30},"end":{"line":29,"column":72}},"type":"binary-expr","locations":[{"start":{"line":29,"column":30},"end":{"line":29,"column":49}},{"start":{"line":29,"column":53},"end":{"line":29,"column":72}}],"line":29},"9":{"loc":{"start":{"line":30,"column":30},"end":{"line":30,"column":95}},"type":"binary-expr","locations":[{"start":{"line":30,"column":30},"end":{"line":30,"column":53}},{"start":{"line":30,"column":57},"end":{"line":30,"column":75}},{"start":{"line":30,"column":79},"end":{"line":30,"column":95}}],"line":30},"10":{"loc":{"start":{"line":33,"column":30},"end":{"line":33,"column":122}},"type":"cond-expr","locations":[{"start":{"line":33,"column":52},"end":{"line":33,"column":96}},{"start":{"line":33,"column":99},"end":{"line":33,"column":122}}],"line":33},"11":{"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":156}},"type":"binary-expr","locations":[{"start":{"line":39,"column":27},"end":{"line":39,"column":89}},{"start":{"line":39,"column":93},"end":{"line":39,"column":156}}],"line":39},"12":{"loc":{"start":{"line":40,"column":61},"end":{"line":40,"column":218}},"type":"cond-expr","locations":[{"start":{"line":40,"column":126},"end":{"line":40,"column":170}},{"start":{"line":40,"column":173},"end":{"line":40,"column":218}}],"line":40}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":14,"6":14,"7":14,"8":0,"9":14,"10":14,"11":0,"12":14,"13":14,"14":14,"15":0,"16":14,"17":14,"18":14,"19":14,"20":0,"21":0,"22":0,"23":0,"24":0,"25":14,"26":14,"27":9,"28":9},"f":{"0":9,"1":14,"2":14,"3":14,"4":14,"5":0,"6":0,"7":0},"b":{"0":[0],"1":[0],"2":[14,0],"3":[14,0],"4":[14,0],"5":[14,0],"6":[14,0],"7":[0,14],"8":[14,0],"9":[14,14,14],"10":[0,0],"11":[0,0],"12":[0,0]},"inputSourceMap":{"version":3,"file":"PageableMiddleware.js","sourceRoot":"","sources":["PageableMiddleware.ts"],"names":[],"mappings":";;AACA,mCAA+B;AAC/B,uEAAsF;AAEtF,MAAM,kBAAkB,GAAG,CAAC,EAAE,WAAW,GAAG,EAAE,EAAE,OAAO,GAAG,IAAI,EAAE,EAAE,EAAE;IAClE,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QACrC,IAAI,KAAc,CAAC;QAEnB,IAAI,cAAK,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,EAAE;YAC3B,IAAI,GAAG,CAAC,CAAC;SACV;aAAM;YACL,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC3B;QAED,IAAI,cAAK,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;YAC5B,IAAI,GAAG,WAAW,CAAC;SACpB;aAAM;YACL,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC3B;QAED,IAAI,cAAK,CAAC,IAAI,CAAC,EAAE;YACf,IAAI,GAAG,EAAE,CAAC;SACX;QAED,IAAI,IAAI,GAAG,OAAO,EAAE;YAClB,IAAI,GAAG,OAAO,CAAC;SAChB;QAED,KAAK,GAAI,IAAe,CAAC,KAAK,CAAC,GAAG,CAAC;aAChC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC1B,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;aAC5D,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;aACnF,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACd,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,wCAAa,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YACpF,OAAO;gBACL,SAAS;gBACT,IAAI;aACL,CAAC;QACJ,CAAC,CAAC;aACD,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,KAAK,wCAAa,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,KAAK,wCAAa,CAAC,IAAI,CAAC;aAC1F,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,mBACP,GAAG,IACN,SAAS,EAAE,GAAG,CAAC,SAAS,KAAK,wCAAa,CAAC,GAAG,CAAC,CAAC,CAAC,wCAAa,CAAC,GAAG,CAAC,CAAC,CAAC,wCAAa,CAAC,IAAI,IACvF,CAAC,CAAC;QAEN,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,sCAAW,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACxD,MAAM,IAAI,EAAE,CAAC;IAEf,CAAC,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAGA,gDAAkB","sourcesContent":["import { Middleware, Context } from 'koa';\nimport { isNil } from 'lodash';\nimport { Pageable, PageRequest, Sort, SortDirection } from 'lexica-dialog-repository';\n\nconst pageableMiddleware = ({ defaultSize = 50, maxSize = 5000 }) => {\n  const middleware: Middleware = async (ctx, next) => {\n    let { page, size, sort } = ctx.query;\n    let sorts : Sort[];\n\n    if (isNil(page) || page < 0) {\n      page = 0;\n    } else {\n      page = parseInt(page, 10);\n    }\n\n    if (isNil(size) || size <= 0) {\n      size = defaultSize;\n    } else {\n      size = parseInt(size, 10);\n    }\n\n    if (isNil(sort)) {\n      sort = '';\n    }\n\n    if (size > maxSize) {\n      size = maxSize;\n    }\n\n    sorts = (sort as string).split('|')\n      .map(str => str.split(','))\n      .filter(tokens => tokens.length === 1 || tokens.length === 2)\n      .filter(tokens => tokens[0] !== undefined && tokens[0] !== null && tokens[0] !== '')\n      .map((tokens) => {\n        const name = tokens[0];\n        const direction = tokens.length === 1 ? SortDirection.ASC : tokens[1].toLowerCase();\n        return {\n          direction,\n          name,\n        };\n      })\n      .filter(obj => obj.direction === SortDirection.ASC || obj.direction === SortDirection.DESC)\n      .map(obj => ({\n        ...obj,\n        direction: obj.direction === SortDirection.ASC ? SortDirection.ASC : SortDirection.DESC,\n      }));\n\n    ctx.state.pageable = new PageRequest(page, size, sorts);\n    await next();\n\n  };\n\n  return middleware;\n};\n\nexport {\n  pageableMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"ff6a70606271c841b2e506c92615e6f73a04ac4a"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/ResponseWrapperMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/ResponseWrapperMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":13},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":28},"end":{"line":18,"column":1}},"5":{"start":{"line":8,"column":4},"end":{"line":16,"column":5}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":23}},"7":{"start":{"line":11,"column":9},"end":{"line":16,"column":5}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":57}},"9":{"start":{"line":15,"column":8},"end":{"line":15,"column":53}},"10":{"start":{"line":17,"column":4},"end":{"line":17,"column":18}},"11":{"start":{"line":19,"column":34},"end":{"line":45,"column":1}},"12":{"start":{"line":20,"column":23},"end":{"line":43,"column":5}},"13":{"start":{"line":21,"column":8},"end":{"line":42,"column":9}},"14":{"start":{"line":22,"column":12},"end":{"line":22,"column":25}},"15":{"start":{"line":23,"column":12},"end":{"line":32,"column":13}},"16":{"start":{"line":24,"column":16},"end":{"line":24,"column":65}},"17":{"start":{"line":25,"column":16},"end":{"line":28,"column":18}},"18":{"start":{"line":31,"column":16},"end":{"line":31,"column":43}},"19":{"start":{"line":35,"column":25},"end":{"line":35,"column":51}},"20":{"start":{"line":36,"column":62},"end":{"line":36,"column":66}},"21":{"start":{"line":37,"column":12},"end":{"line":37,"column":36}},"22":{"start":{"line":38,"column":12},"end":{"line":38,"column":69}},"23":{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},"24":{"start":{"line":40,"column":16},"end":{"line":40,"column":37}},"25":{"start":{"line":44,"column":4},"end":{"line":44,"column":22}},"26":{"start":{"line":46,"column":0},"end":{"line":46,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":28},"end":{"line":6,"column":29}},"loc":{"start":{"line":6,"column":39},"end":{"line":18,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":34},"end":{"line":19,"column":35}},"loc":{"start":{"line":19,"column":40},"end":{"line":45,"column":1}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":23},"end":{"line":20,"column":24}},"loc":{"start":{"line":20,"column":44},"end":{"line":43,"column":5}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":16,"column":5}},{"start":{"line":8,"column":4},"end":{"line":16,"column":5}}],"line":8},"1":{"loc":{"start":{"line":11,"column":9},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":11,"column":9},"end":{"line":16,"column":5}},{"start":{"line":11,"column":9},"end":{"line":16,"column":5}}],"line":11},"2":{"loc":{"start":{"line":23,"column":12},"end":{"line":32,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":32,"column":13}},{"start":{"line":23,"column":12},"end":{"line":32,"column":13}}],"line":23},"3":{"loc":{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},{"start":{"line":39,"column":12},"end":{"line":41,"column":13}}],"line":39}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":38,"6":0,"7":38,"8":38,"9":0,"10":38,"11":9,"12":9,"13":47,"14":47,"15":0,"16":0,"17":0,"18":0,"19":38,"20":38,"21":38,"22":38,"23":38,"24":0,"25":9,"26":9},"f":{"0":38,"1":9,"2":47},"b":{"0":[0,38],"1":[38,0],"2":[0,0],"3":[0,38]},"inputSourceMap":{"version":3,"file":"ResponseWrapperMiddleware.js","sourceRoot":"","sources":["ResponseWrapperMiddleware.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAG7B,mCAAmC;AACnC,mCAA0C;AAE1C,MAAM,mBAAmB,GAAG,CAAC,KAAU,EAAE,EAAE;IACzC,IAAI,MAAM,CAAC;IACX,IAAI,KAAK,CAAC,MAAM,EAAE;QAChB,MAAM,GAAG,KAAK,CAAC;KAChB;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE;QAC7C,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAClD;SAAM;QACL,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAC9C;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG,GAAG,EAAE;IACrC,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,IAAI;YACF,MAAM,IAAI,EAAE,CAAC;YACb,IAAI,CAAC,cAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACpB,GAAG,CAAC,MAAM,GAAG,kBAAS,CAAS,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAChD,GAAG,CAAC,IAAI,GAAG;oBACT,OAAO,EAAE,GAAG,CAAC,IAAI;oBACjB,UAAU,EAAE,GAAG,CAAC,MAAM;iBACvB,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;aAC5B;SACF;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YACvD,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC;YACxB,GAAG,CAAC,IAAI,qBACH,OAAO,IACV,OAAO,EAAE,IAAI,GACd,CAAC;YACF,IAAI,UAAU,KAAK,GAAG,EAAE;gBACtB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;SACF;IACH,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAGA,8DAAyB","sourcesContent":["import * as Boom from 'boom';\nimport { Middleware, Context } from 'koa';\nimport { ObjectSchema, validate } from 'joi';\nimport * as winston from 'winston';\nimport { isNil, defaultTo } from 'lodash';\n\nconst createBoomFromError = (error: any) => {\n  let result;\n  if (error.isBoom) {\n    result = error;\n  } else if (error.name === 'UnauthorizedError') {\n    result = Boom.unauthorized(error.message, error);\n  } else {\n    result = Boom.internal(error.message, error);\n  }\n  return result;\n};\n\nconst responseWrapperMiddleware = () => {\n  const middleware: Middleware = async (ctx, next) => {\n    try {\n      await next();\n      if (!isNil(ctx.body)) {\n        ctx.status = defaultTo<number>(ctx.status, 200);\n        ctx.body = {\n          payload: ctx.body,\n          statusCode: ctx.status,\n        };\n      } else {\n        throw Boom.notAcceptable();\n      }\n    } catch (error) {\n      const boom = createBoomFromError(error);\n      const { output: { payload, statusCode }, data } = boom;\n      ctx.status = statusCode;\n      ctx.body = {\n        ...payload,\n        payload: data,\n      };\n      if (statusCode === 500) {\n        winston.error(error);\n      }\n    }\n  };\n  return middleware;\n};\n\nexport {\n  responseWrapperMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"bba07bc6f6143d536b00b8702f71754dc353e048"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/TokenMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/TokenMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":27},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":24},"end":{"line":12,"column":1}},"4":{"start":{"line":6,"column":23},"end":{"line":10,"column":5}},"5":{"start":{"line":7,"column":22},"end":{"line":7,"column":37}},"6":{"start":{"line":8,"column":8},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":8},"end":{"line":9,"column":21}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":22}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":42}},"10":{"start":{"line":14,"column":27},"end":{"line":14,"column":100}},"11":{"start":{"line":15,"column":0},"end":{"line":15,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":24},"end":{"line":5,"column":25}},"loc":{"start":{"line":5,"column":30},"end":{"line":12,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":23},"end":{"line":6,"column":24}},"loc":{"start":{"line":6,"column":44},"end":{"line":10,"column":5}},"line":6}},"branchMap":{},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":5,"6":5,"7":5,"8":9,"9":9,"10":9,"11":9},"f":{"0":9,"1":5},"b":{},"inputSourceMap":{"version":3,"file":"TokenMiddleware.js","sourceRoot":"","sources":["TokenMiddleware.ts"],"names":[],"mappings":";;AAIA,yDAA4D;AAC5D,uCAAuC;AAEvC,MAAM,eAAe,GAAG,GAAG,EAAE;IAC3B,MAAM,UAAU,GAAe,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QACjD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;QAC9B,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,KAAK,CAAC;QACtD,MAAM,IAAI,EAAE,CAAC;IACf,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAME,0CAAe;AAJnB,MAAM,kBAAkB,GAAG,OAAO,CAAC,CAAC,eAAe,EAAE,EAAC,yCAAsB,EAAE,CAAC,CAAC,CAAC;AAG7E,gDAAkB","sourcesContent":["import { Middleware, Context } from 'koa';\nimport * as Boom from 'boom';\nimport { isNil } from 'lodash';\nimport * as koaJwt from 'koa-jwt';\nimport { createKaoJwtMiddleware } from './KoaJwtMiddleware';\nimport * as compose from 'koa-compose';\n\nconst tokenMiddleware = () => {\n  const middleware: Middleware = async (ctx, next) => {\n    const token = ctx.query.token;\n    ctx.request.headers.authorization = 'bearer ' + token;\n    await next();\n  };\n  return middleware;\n};\n\nconst composedMiddleware = compose([tokenMiddleware(),createKaoJwtMiddleware()]);\n\nexport {\n    composedMiddleware,\n    tokenMiddleware,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"55290d87a9f58254e2aa6f2318f7123ef1eb00dd"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/ValidationMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/ValidationMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":13},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":30},"end":{"line":6,"column":63}},"5":{"start":{"line":6,"column":43},"end":{"line":6,"column":63}},"6":{"start":{"line":7,"column":35},"end":{"line":20,"column":1}},"7":{"start":{"line":8,"column":23},"end":{"line":18,"column":5}},"8":{"start":{"line":9,"column":23},"end":{"line":9,"column":70}},"9":{"start":{"line":10,"column":8},"end":{"line":17,"column":9}},"10":{"start":{"line":11,"column":49},"end":{"line":11,"column":55}},"11":{"start":{"line":12,"column":12},"end":{"line":12,"column":49}},"12":{"start":{"line":15,"column":12},"end":{"line":15,"column":48}},"13":{"start":{"line":16,"column":12},"end":{"line":16,"column":25}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":22}},"15":{"start":{"line":21,"column":0},"end":{"line":21,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":30},"end":{"line":6,"column":31}},"loc":{"start":{"line":6,"column":43},"end":{"line":6,"column":63}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":35},"end":{"line":7,"column":36}},"loc":{"start":{"line":7,"column":87},"end":{"line":20,"column":1}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":23},"end":{"line":8,"column":24}},"loc":{"start":{"line":8,"column":48},"end":{"line":18,"column":5}},"line":8}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":44},"end":{"line":7,"column":82}},"type":"default-arg","locations":[{"start":{"line":7,"column":61},"end":{"line":7,"column":82}}],"line":7},"1":{"loc":{"start":{"line":10,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":17,"column":9}},{"start":{"line":10,"column":8},"end":{"line":17,"column":9}}],"line":10}},"s":{"0":9,"1":9,"2":9,"3":9,"4":9,"5":9,"6":9,"7":45,"8":9,"9":9,"10":0,"11":0,"12":9,"13":9,"14":45,"15":9},"f":{"0":9,"1":45,"2":9},"b":{"0":[27],"1":[0,9]},"inputSourceMap":{"version":3,"file":"ValidationMiddleware.js","sourceRoot":"","sources":["ValidationMiddleware.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAE7B,6BAA6C;AAC7C,mCAA+B;AAI/B,MAAM,qBAAqB,GAAmB,CAAC,OAAgB,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AAEzF,MAAM,0BAA0B,GAC5B,CAAC,MAAoB,EAAE,iBAAiC,qBAAqB,EAAE,EAAE;IACjF,MAAM,UAAU,GAAe,KAAK,EAAE,OAAgB,EAAE,IAAI,EAAE,EAAE;QAC9D,MAAM,MAAM,GAAG,cAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;QACzD,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,CAAC;YAC5C,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACtC;aAAM;YACL,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;YACpC,MAAM,IAAI,EAAE,CAAC;SACd;IACH,CAAC,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEK,gEAA0B","sourcesContent":["import * as Boom from 'boom';\nimport { Middleware, Context } from 'koa';\nimport { ObjectSchema, validate } from 'joi';\nimport { isNil } from 'lodash';\n\ntype ObjectProvider = (context: Context) => any;\n\nconst defaultObjectProvider: ObjectProvider = (context: Context) => context.request.body;\n\nconst createValidationMiddleware\n  = (schema: ObjectSchema, objectProvider: ObjectProvider = defaultObjectProvider) => {\n    const middleware: Middleware = async (context: Context, next) => {\n      const result = validate(objectProvider(context), schema);\n      if (!isNil(result.error)) {\n        const { error: { name, details } } = result;\n        throw Boom.badRequest(name, details);\n      } else {\n        context.request.body = result.value;\n        await next();\n      }\n    };\n    return middleware;\n  };\n\nexport { createValidationMiddleware };\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"16b9a7fc836abc3aca8abc4c6d018641ad130621"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-virtual-agent-admin-backend/src/middlewares/index.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"2":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}}},"fnMap":{"0":{"name":"__export","decl":{"start":{"line":2,"column":9},"end":{"line":2,"column":17}},"loc":{"start":{"line":2,"column":21},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},{"start":{"line":3,"column":21},"end":{"line":3,"column":71}}],"line":3}},"s":{"0":36,"1":36,"2":36,"3":9,"4":9,"5":9,"6":9,"7":9},"f":{"0":36},"b":{"0":[36,0]},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;AAAA,wCAAmC;AACnC,0CAAqC;AACrC,iDAA4C;AAC5C,4CAAuC","sourcesContent":["export * from './KoaJwtMiddleware';\nexport * from './PageableMiddleware';\nexport * from './ResponseWrapperMiddleware';\nexport * from './ValidationMiddleware';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"57daf4a2a758d229f37dc4a39e888f9585887ad2"}
}
